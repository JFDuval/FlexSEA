ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC_SAR_Seq_1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_SAR_Seq_1_initVar
  18              		.bss
  19              		.type	ADC_SAR_Seq_1_initVar, %object
  20              		.size	ADC_SAR_Seq_1_initVar, 1
  21              	ADC_SAR_Seq_1_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_SAR_Seq_1_offset,8,4
  24              		.comm	ADC_SAR_Seq_1_countsPer10Volt,16,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_SAR_Seq_1_channelsConfig, %object
  28              		.size	ADC_SAR_Seq_1_channelsConfig, 16
  29              	ADC_SAR_Seq_1_channelsConfig:
  30 0000 00000000 		.space	16
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.section	.text.ADC_SAR_Seq_1_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_SAR_Seq_1_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_SAR_Seq_1_Start, %function
  37              	ADC_SAR_Seq_1_Start:
  38              	.LFB2:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c"
   1:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * File Name: ADC_SAR_Seq_1.c
   3:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Version 2.0
   4:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   5:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   9:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  11:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * the software package with which this file was provided.
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 2


  16:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  18:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #include "ADC_SAR_Seq_1.h"
  19:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  20:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  21:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint8 ADC_SAR_Seq_1_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int16 ADC_SAR_Seq_1_offset[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int32 ADC_SAR_Seq_1_countsPer10Volt[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];   /* Gain compensat
  27:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  28:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  29:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** static const uint32 CYCODE ADC_SAR_Seq_1_channelsConfig[] = { 0x00000000u, 0x00000000u, 0x00000000u
  34:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  35:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  36:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Start
  38:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  40:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  45:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  48:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  51:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  57:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  to zero before call of ADC_SAR_Seq_1_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Init() and ADC_SAR_Seq_1_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  61:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  62:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Start(void)
  64:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 3


  65:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(ADC_SAR_Seq_1_initVar == 0u)
  48              		.loc 1 66 0
  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
  68:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_SAR_Seq_1_Init
  69:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
  71:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_SAR_Seq_1_Enable
  72:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_SAR_Seq_1_initVar
  70              		.cfi_endproc
  71              	.LFE2:
  72              		.size	ADC_SAR_Seq_1_Start, .-ADC_SAR_Seq_1_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.ADC_SAR_Seq_1_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_SAR_Seq_1_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_SAR_Seq_1_Init, %function
  80              	ADC_SAR_Seq_1_Init:
  81              	.LFB3:
  73:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  74:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  75:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Init
  77:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  79:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start().
  83:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  84:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  87:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 4


  88:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  90:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
  91:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  93:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Init(void)
  95:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 90B5     		push	{r4, r7, lr}
  85              		.cfi_def_cfa_offset 12
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 85B0     		sub	sp, sp, #20
  90              		.cfi_def_cfa_offset 32
  91 0004 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 100:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         static const uint8 CYCODE ADC_SAR_Seq_1_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 103:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PIN
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 5


 134:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         };
 136:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 137:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 138:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyIntSetPriority(ADC_SAR_Seq_1_INTC_NUMBER, ADC_SAR_Seq_1_INTC_PRIOR_NUMBER);
  93              		.loc 1 140 0
  94 0006 0F20     		mov	r0, #15
  95 0008 0321     		mov	r1, #3
  96 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         (void)CyIntSetVector(ADC_SAR_Seq_1_INTC_NUMBER, &ADC_SAR_Seq_1_ISR);
  97              		.loc 1 141 0
  98 000e 5D4B     		ldr	r3, .L14
  99 0010 0F20     		mov	r0, #15
 100 0012 191C     		mov	r1, r3
 101 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif   /* End ADC_SAR_Seq_1_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 144:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = ADC_SAR_Seq_1_DEFAULT_EN_CHANNELS;
 102              		.loc 1 145 0
 103 0018 5B4B     		ldr	r3, .L14+4
 104 001a 0722     		mov	r2, #7
 105 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG = ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG;
 106              		.loc 1 146 0
 107 001e 5B4B     		ldr	r3, .L14+8
 108 0020 5B4A     		ldr	r2, .L14+12
 109 0022 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_CTRL_REG_CFG;
 110              		.loc 1 147 0
 111 0024 5B4B     		ldr	r3, .L14+16
 112 0026 5C4A     		ldr	r2, .L14+20
 113 0028 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG = ADC_SAR_Seq_1_DEFAULT_RANGE_THRES_REG_CFG;
 114              		.loc 1 148 0
 115 002a 5C4B     		ldr	r3, .L14+24
 116 002c 5C4A     		ldr	r2, .L14+28
 117 002e 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_COND_REG  = ADC_SAR_Seq_1_COMPARE_MODE;
 118              		.loc 1 149 0
 119 0030 5C4B     		ldr	r3, .L14+32
 120 0032 0022     		mov	r2, #0
 121 0034 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME01_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME01_REG_CFG;
 122              		.loc 1 150 0
 123 0036 5C4B     		ldr	r3, .L14+36
 124 0038 5C4A     		ldr	r2, .L14+40
 125 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME23_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME23_REG_CFG;
 126              		.loc 1 151 0
 127 003c 5C4B     		ldr	r3, .L14+44
 128 003e 5B4A     		ldr	r2, .L14+40
 129 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 153:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 6


 154:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_MUX_SWITCH0_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 130              		.loc 1 155 0
 131 0042 5C4B     		ldr	r3, .L14+48
 132 0044 5B4A     		ldr	r2, .L14+48
 133 0046 1268     		ldr	r2, [r2]
 134 0048 8021     		mov	r1, #128
 135 004a 4902     		lsl	r1, r1, #9
 136 004c 0A43     		orr	r2, r1
 137 004e 1A60     		str	r2, [r3]
 156:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 157:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_MUX_SWITCH_HW_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 138              		.loc 1 158 0
 139 0050 594B     		ldr	r3, .L14+52
 140 0052 594A     		ldr	r2, .L14+52
 141 0054 1268     		ldr	r2, [r2]
 142 0056 8021     		mov	r1, #128
 143 0058 4902     		lsl	r1, r1, #9
 144 005a 0A43     		orr	r2, r1
 145 005c 1A60     		str	r2, [r3]
 159:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /*ADC_SAR_Seq_1_CHANNELS_MODE !=0 */
 161:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 162:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = 0u;
 146              		.loc 1 162 0
 147 005e 574B     		ldr	r3, .L14+56
 148 0060 0022     		mov	r2, #0
 149 0062 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = 0u;
 150              		.loc 1 163 0
 151 0064 564B     		ldr	r3, .L14+60
 152 0066 0022     		mov	r2, #0
 153 0068 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_INTR_MASK_REG = ADC_SAR_Seq_1_SAR_INTR_MASK;
 154              		.loc 1 164 0
 155 006a 564B     		ldr	r3, .L14+64
 156 006c 0122     		mov	r2, #1
 157 006e 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 166:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_PSOC4)
 167:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_ANA_TRIM_REG = ADC_SAR_Seq_1_TRIM_COEF;
 168:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_PSOC4) */
 169:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 170:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Read and modify default configuration based on characterization */
 171:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal = ADC_SAR_Seq_1_SAR_DFT_CTRL_REG;
 158              		.loc 1 171 0
 159 0070 554B     		ldr	r3, .L14+68
 160 0072 1B68     		ldr	r3, [r3]
 161 0074 7B60     		str	r3, [r7, #4]
 172:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DCEN;
 162              		.loc 1 172 0
 163 0076 7A68     		ldr	r2, [r7, #4]
 164 0078 544B     		ldr	r3, .L14+72
 165 007a 1340     		and	r3, r2
 166 007c 7B60     		str	r3, [r7, #4]
 173:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 7


 174:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_PSOC4)
 175:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_NOMINAL_CLOCK_FREQ > (ADC_SAR_Seq_1_MAX_FREQUENCY / 2))
 176:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_SEL_CSEL_DFT_CHAR;
 177:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else  /* clock speed < 9 Mhz */
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 179:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* clock speed > 9 Mhz */
 180:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else
 181:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 182:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF))
 183:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 184:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 185:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DCEN;
 167              		.loc 1 185 0
 168 007e 7B68     		ldr	r3, [r7, #4]
 169 0080 8022     		mov	r2, #128
 170 0082 9205     		lsl	r2, r2, #22
 171 0084 1343     		orr	r3, r2
 172 0086 7B60     		str	r3, [r7, #4]
 186:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DLY_INC;
 173              		.loc 1 186 0
 174 0088 7B68     		ldr	r3, [r7, #4]
 175 008a 0122     		mov	r2, #1
 176 008c 9343     		bic	r3, r2
 177 008e 7B60     		str	r3, [r7, #4]
 187:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 188:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF)) */
 189:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_PSOC4) */
 190:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 191:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_DFT_CTRL_REG = tmpRegVal;
 178              		.loc 1 191 0
 179 0090 4D4B     		ldr	r3, .L14+68
 180 0092 7A68     		ldr	r2, [r7, #4]
 181 0094 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 193:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12)
 194:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_WOUNDING_REG = ADC_SAR_Seq_1_ALT_WOUNDING;
 195:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 196:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 197:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 182              		.loc 1 197 0
 183 0096 0023     		mov	r3, #0
 184 0098 FB60     		str	r3, [r7, #12]
 185 009a 6DE0     		b	.L6
 186              	.L13:
 198:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 199:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         tmpRegVal = (ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_CHANNEL_CONFIG_MASK);
 187              		.loc 1 199 0
 188 009c 4C4B     		ldr	r3, .L14+76
 189 009e FA68     		ldr	r2, [r7, #12]
 190 00a0 9200     		lsl	r2, r2, #2
 191 00a2 D258     		ldr	r2, [r2, r3]
 192 00a4 DC23     		mov	r3, #220
 193 00a6 9B01     		lsl	r3, r3, #6
 194 00a8 1340     		and	r3, r2
 195 00aa 7B60     		str	r3, [r7, #4]
 200:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 201:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_InputsPlacement[chNum];
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 8


 196              		.loc 1 201 0
 197 00ac 494A     		ldr	r2, .L14+80
 198 00ae FB68     		ldr	r3, [r7, #12]
 199 00b0 D318     		add	r3, r2, r3
 200 00b2 1B78     		ldrb	r3, [r3]
 201 00b4 7A68     		ldr	r2, [r7, #4]
 202 00b6 1343     		orr	r3, r2
 203 00b8 7B60     		str	r3, [r7, #4]
 202:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 203:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 204:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 205:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 206:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 207:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  (0) and 8-bit (1) resolution.
 208:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         */
 209:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if((ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12) && \
 210:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (ADC_SAR_Seq_1_ALT_WOUNDING == ADC_SAR_Seq_1_WOUNDING_10BIT))
 211:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)(~ADC_SAR_Seq_1_ALT_RESOLUTION_ON);
 212:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 213:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 214:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 215:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(chNum < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 216:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 217:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 218:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRe
 204              		.loc 1 218 0
 205 00ba FB68     		ldr	r3, [r7, #12]
 206 00bc 9B00     		lsl	r3, r3, #2
 207 00be 464A     		ldr	r2, .L14+84
 208 00c0 9B18     		add	r3, r3, r2
 209 00c2 7A68     		ldr	r2, [r7, #4]
 210 00c4 1A60     		str	r2, [r3]
 219:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 220:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 211              		.loc 1 220 0
 212 00c6 424B     		ldr	r3, .L14+76
 213 00c8 FA68     		ldr	r2, [r7, #12]
 214 00ca 9200     		lsl	r2, r2, #2
 215 00cc D258     		ldr	r2, [r2, r3]
 216 00ce 0123     		mov	r3, #1
 217 00d0 1340     		and	r3, r2
 218 00d2 0AD0     		beq	.L7
 221:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 222:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 219              		.loc 1 222 0
 220 00d4 394B     		ldr	r3, .L14+56
 221 00d6 394A     		ldr	r2, .L14+56
 222 00d8 1168     		ldr	r1, [r2]
 223 00da FA68     		ldr	r2, [r7, #12]
 224 00dc 0120     		mov	r0, #1
 225 00de 041C     		mov	r4, r0
 226 00e0 9440     		lsl	r4, r4, r2
 227 00e2 221C     		mov	r2, r4
 228 00e4 92B2     		uxth	r2, r2
 229 00e6 0A43     		orr	r2, r1
 230 00e8 1A60     		str	r2, [r3]
 231              	.L7:
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 9


 223:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 224:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 225:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0u)
 232              		.loc 1 225 0
 233 00ea 394B     		ldr	r3, .L14+76
 234 00ec FA68     		ldr	r2, [r7, #12]
 235 00ee 9200     		lsl	r2, r2, #2
 236 00f0 D258     		ldr	r2, [r2, r3]
 237 00f2 0223     		mov	r3, #2
 238 00f4 1340     		and	r3, r2
 239 00f6 0AD0     		beq	.L8
 226:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 227:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 240              		.loc 1 227 0
 241 00f8 314B     		ldr	r3, .L14+60
 242 00fa 314A     		ldr	r2, .L14+60
 243 00fc 1168     		ldr	r1, [r2]
 244 00fe FA68     		ldr	r2, [r7, #12]
 245 0100 0120     		mov	r0, #1
 246 0102 041C     		mov	r4, r0
 247 0104 9440     		lsl	r4, r4, r2
 248 0106 221C     		mov	r2, r4
 249 0108 92B2     		uxth	r2, r2
 250 010a 0A43     		orr	r2, r1
 251 010c 1A60     		str	r2, [r3]
 252              	.L8:
 228:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 229:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 230:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 231:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             else
 232:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 233:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 CY_SET_REG32(ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_SAR_Seq_1_INJ_T
 234:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 235:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 236:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 237:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_SATURATE_MASK;
 238:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 239:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 240:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0
 241:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 242:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_RANGE_MASK;
 243:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 244:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 245:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 246:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 247:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_ALT_RESOLUTION_ON) != 0u)
 253              		.loc 1 247 0
 254 010e 304B     		ldr	r3, .L14+76
 255 0110 FA68     		ldr	r2, [r7, #12]
 256 0112 9200     		lsl	r2, r2, #2
 257 0114 D258     		ldr	r2, [r2, r3]
 258 0116 8023     		mov	r3, #128
 259 0118 9B00     		lsl	r3, r3, #2
 260 011a 1340     		and	r3, r2
 261 011c 03D0     		beq	.L9
 248:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 249:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_DEFAULT_MAX_WRK_ALT;
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 10


 262              		.loc 1 249 0
 263 011e 8023     		mov	r3, #128
 264 0120 5B00     		lsl	r3, r3, #1
 265 0122 BB60     		str	r3, [r7, #8]
 266 0124 02E0     		b	.L10
 267              	.L9:
 250:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 251:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else
 252:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 253:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_SAR_WRK_MAX_12BIT;
 268              		.loc 1 253 0
 269 0126 8023     		mov	r3, #128
 270 0128 5B01     		lsl	r3, r3, #5
 271 012a BB60     		str	r3, [r7, #8]
 272              	.L10:
 254:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 255:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 256:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_DIFFERENTIAL_EN) == 0u)
 273              		.loc 1 256 0
 274 012c 284B     		ldr	r3, .L14+76
 275 012e FA68     		ldr	r2, [r7, #12]
 276 0130 9200     		lsl	r2, r2, #2
 277 0132 D258     		ldr	r2, [r2, r3]
 278 0134 8023     		mov	r3, #128
 279 0136 5B00     		lsl	r3, r3, #1
 280 0138 1340     		and	r3, r2
 281 013a 05D1     		bne	.L11
 257:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 258:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if((ADC_SAR_Seq_1_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED) && \
 259:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 (ADC_SAR_Seq_1_DEFAULT_NEG_INPUT_SEL == ADC_SAR_Seq_1__VREF))
 260:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 261:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / -2);
 262:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 263:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 282              		.loc 1 263 0
 283 013c 274B     		ldr	r3, .L14+88
 284 013e FA68     		ldr	r2, [r7, #12]
 285 0140 5200     		lsl	r2, r2, #1
 286 0142 0021     		mov	r1, #0
 287 0144 D152     		strh	r1, [r2, r3]
 288 0146 04E0     		b	.L12
 289              	.L11:
 264:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED */
 265:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 266:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else    /* Differential channel */
 267:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 268:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED)
 269:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the half scale to convert results to signed format */
 270:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / 2);
 271:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 272:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 290              		.loc 1 272 0
 291 0148 244B     		ldr	r3, .L14+88
 292 014a FA68     		ldr	r2, [r7, #12]
 293 014c 5200     		lsl	r2, r2, #1
 294 014e 0021     		mov	r1, #0
 295 0150 D152     		strh	r1, [r2, r3]
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 11


 296              	.L12:
 273:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED 
 274:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 275:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Calculate gain in counts per 10 volts with rounding */
 276:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_Seq_1_10MV_COUNTS) +
 297              		.loc 1 276 0
 298 0152 BB68     		ldr	r3, [r7, #8]
 299 0154 224A     		ldr	r2, .L14+92
 300 0156 5343     		mul	r3, r2
 301 0158 224A     		ldr	r2, .L14+96
 302 015a 9B18     		add	r3, r3, r2
 277:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                             ADC_SAR_Seq_1_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_Seq_1_DEFAULT_VREF_MV_V
 303              		.loc 1 277 0
 304 015c 181C     		mov	r0, r3
 305 015e 2249     		ldr	r1, .L14+100
 306 0160 FFF7FEFF 		bl	__aeabi_idiv
 307 0164 031C     		mov	r3, r0
 276:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_Seq_1_10MV_COUNTS) +
 308              		.loc 1 276 0
 309 0166 9BB2     		uxth	r3, r3
 310 0168 19B2     		sxth	r1, r3
 311 016a 204B     		ldr	r3, .L14+104
 312 016c FA68     		ldr	r2, [r7, #12]
 313 016e 9200     		lsl	r2, r2, #2
 314 0170 D150     		str	r1, [r2, r3]
 197:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 315              		.loc 1 197 0
 316 0172 FB68     		ldr	r3, [r7, #12]
 317 0174 0133     		add	r3, r3, #1
 318 0176 FB60     		str	r3, [r7, #12]
 319              	.L6:
 197:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 320              		.loc 1 197 0 is_stmt 0 discriminator 1
 321 0178 FB68     		ldr	r3, [r7, #12]
 322 017a 032B     		cmp	r3, #3
 323 017c 8ED9     		bls	.L13
 278:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 279:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 324              		.loc 1 279 0 is_stmt 1
 325 017e BD46     		mov	sp, r7
 326 0180 05B0     		add	sp, sp, #20
 327              		@ sp needed
 328 0182 90BD     		pop	{r4, r7, pc}
 329              	.L15:
 330              		.align	2
 331              	.L14:
 332 0184 00000000 		.word	ADC_SAR_Seq_1_ISR
 333 0188 20003A40 		.word	1077542944
 334 018c 00003A40 		.word	1077542912
 335 0190 70200013 		.word	318775408
 336 0194 04003A40 		.word	1077542916
 337 0198 8C000080 		.word	-2147483508
 338 019c 18003A40 		.word	1077542936
 339 01a0 0000FF07 		.word	134152192
 340 01a4 1C003A40 		.word	1077542940
 341 01a8 10003A40 		.word	1077542928
 342 01ac 02000200 		.word	131074
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 12


 343 01b0 14003A40 		.word	1077542932
 344 01b4 00033A40 		.word	1077543680
 345 01b8 40033A40 		.word	1077543744
 346 01bc 28023A40 		.word	1077543464
 347 01c0 38023A40 		.word	1077543480
 348 01c4 18023A40 		.word	1077543448
 349 01c8 30003A40 		.word	1077542960
 350 01cc FFFFFFDF 		.word	-536870913
 351 01d0 00000000 		.word	ADC_SAR_Seq_1_channelsConfig
 352 01d4 10000000 		.word	ADC_SAR_Seq_1_InputsPlacement.4747
 353 01d8 80003A40 		.word	1077543040
 354 01dc 00000000 		.word	ADC_SAR_Seq_1_offset
 355 01e0 10270000 		.word	10000
 356 01e4 E40C0000 		.word	3300
 357 01e8 C8190000 		.word	6600
 358 01ec 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 359              		.cfi_endproc
 360              	.LFE3:
 361              		.size	ADC_SAR_Seq_1_Init, .-ADC_SAR_Seq_1_Init
 362              		.section	.text.ADC_SAR_Seq_1_Enable,"ax",%progbits
 363              		.align	2
 364              		.global	ADC_SAR_Seq_1_Enable
 365              		.code	16
 366              		.thumb_func
 367              		.type	ADC_SAR_Seq_1_Enable, %function
 368              	ADC_SAR_Seq_1_Enable:
 369              	.LFB4:
 280:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 281:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_1_Enable
 283:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 284:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 285:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 286:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Enables the clock and analog power for SAR ADC.
 287:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 288:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 289:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 290:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 291:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 292:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 294:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Enable(void)
 296:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 370              		.loc 1 296 0
 371              		.cfi_startproc
 372 0000 80B5     		push	{r7, lr}
 373              		.cfi_def_cfa_offset 8
 374              		.cfi_offset 7, -8
 375              		.cfi_offset 14, -4
 376 0002 00AF     		add	r7, sp, #0
 377              		.cfi_def_cfa_register 7
 297:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if (0u == (ADC_SAR_Seq_1_SAR_CTRL_REG & ADC_SAR_Seq_1_ENABLE))
 378              		.loc 1 297 0
 379 0004 0A4B     		ldr	r3, .L19
 380 0006 1B68     		ldr	r3, [r3]
 381 0008 002B     		cmp	r3, #0
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 13


 382 000a 0EDB     		blt	.L16
 298:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 299:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_PSOC4)
 300:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 301:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             while (0u != (ADC_SAR_Seq_1_SAR_STATUS_REG & ADC_SAR_Seq_1_STATUS_BUSY))
 383              		.loc 1 301 0
 384 000c C046     		mov	r8, r8
 385              	.L18:
 386              		.loc 1 301 0 is_stmt 0 discriminator 1
 387 000e 094B     		ldr	r3, .L19+4
 388 0010 1B68     		ldr	r3, [r3]
 389 0012 002B     		cmp	r3, #0
 390 0014 FBDB     		blt	.L18
 302:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 303:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 304:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 305:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_PSOC4) */
 306:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 307:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_ENABLE;
 391              		.loc 1 307 0 is_stmt 1
 392 0016 064B     		ldr	r3, .L19
 393 0018 054A     		ldr	r2, .L19
 394 001a 1268     		ldr	r2, [r2]
 395 001c 8021     		mov	r1, #128
 396 001e 0906     		lsl	r1, r1, #24
 397 0020 0A43     		orr	r2, r1
 398 0022 1A60     		str	r2, [r3]
 308:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 309:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 310:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyDelayUs(ADC_SAR_Seq_1_10US_DELAY);         
 399              		.loc 1 310 0
 400 0024 0A20     		mov	r0, #10
 401 0026 FFF7FEFF 		bl	CyDelayUs
 402              	.L16:
 311:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 312:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 403              		.loc 1 312 0
 404 002a BD46     		mov	sp, r7
 405              		@ sp needed
 406 002c 80BD     		pop	{r7, pc}
 407              	.L20:
 408 002e C046     		.align	2
 409              	.L19:
 410 0030 00003A40 		.word	1077542912
 411 0034 08023A40 		.word	1077543432
 412              		.cfi_endproc
 413              	.LFE4:
 414              		.size	ADC_SAR_Seq_1_Enable, .-ADC_SAR_Seq_1_Enable
 415              		.section	.text.ADC_SAR_Seq_1_Stop,"ax",%progbits
 416              		.align	2
 417              		.global	ADC_SAR_Seq_1_Stop
 418              		.code	16
 419              		.thumb_func
 420              		.type	ADC_SAR_Seq_1_Stop, %function
 421              	ADC_SAR_Seq_1_Stop:
 422              	.LFB5:
 313:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 14


 314:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 315:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 316:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Stop
 317:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 318:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 319:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 320:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 321:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mode.
 322:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 323:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 326:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 329:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Stop(void)
 331:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 423              		.loc 1 331 0
 424              		.cfi_startproc
 425 0000 80B5     		push	{r7, lr}
 426              		.cfi_def_cfa_offset 8
 427              		.cfi_offset 7, -8
 428              		.cfi_offset 14, -4
 429 0002 00AF     		add	r7, sp, #0
 430              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG &= (uint32)~ADC_SAR_Seq_1_ENABLE;
 431              		.loc 1 332 0
 432 0004 034B     		ldr	r3, .L22
 433 0006 034A     		ldr	r2, .L22
 434 0008 1268     		ldr	r2, [r2]
 435 000a 5200     		lsl	r2, r2, #1
 436 000c 5208     		lsr	r2, r2, #1
 437 000e 1A60     		str	r2, [r3]
 333:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 438              		.loc 1 333 0
 439 0010 BD46     		mov	sp, r7
 440              		@ sp needed
 441 0012 80BD     		pop	{r7, pc}
 442              	.L23:
 443              		.align	2
 444              	.L22:
 445 0014 00003A40 		.word	1077542912
 446              		.cfi_endproc
 447              	.LFE5:
 448              		.size	ADC_SAR_Seq_1_Stop, .-ADC_SAR_Seq_1_Stop
 449              		.section	.text.ADC_SAR_Seq_1_StartConvert,"ax",%progbits
 450              		.align	2
 451              		.global	ADC_SAR_Seq_1_StartConvert
 452              		.code	16
 453              		.thumb_func
 454              		.type	ADC_SAR_Seq_1_StartConvert, %function
 455              	ADC_SAR_Seq_1_StartConvert:
 456              	.LFB6:
 334:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 335:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 336:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 15


 337:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StartConvert
 338:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 339:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 340:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 341:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description:
 342:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  For free running mode, this API starts the conversion process and it
 343:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  runs continuously.
 344:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 345:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  In a triggered mode, this routine triggers every conversion by
 346:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 347:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  every conversion has to start by this API.
 348:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 349:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 350:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 351:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 352:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 353:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 355:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 356:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StartConvert(void)
 357:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 457              		.loc 1 357 0
 458              		.cfi_startproc
 459 0000 80B5     		push	{r7, lr}
 460              		.cfi_def_cfa_offset 8
 461              		.cfi_offset 7, -8
 462              		.cfi_offset 14, -4
 463 0002 00AF     		add	r7, sp, #0
 464              		.cfi_def_cfa_register 7
 358:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 359:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG |= ADC_SAR_Seq_1_CONTINUOUS_EN;
 465              		.loc 1 359 0
 466 0004 044B     		ldr	r3, .L25
 467 0006 044A     		ldr	r2, .L25
 468 0008 1268     		ldr	r2, [r2]
 469 000a 8021     		mov	r1, #128
 470 000c 4902     		lsl	r1, r1, #9
 471 000e 0A43     		orr	r2, r1
 472 0010 1A60     		str	r2, [r3]
 360:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else /* Firmware trigger */
 361:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_START_CTRL_REG = ADC_SAR_Seq_1_FW_TRIGGER;
 362:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 363:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 364:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 473              		.loc 1 364 0
 474 0012 BD46     		mov	sp, r7
 475              		@ sp needed
 476 0014 80BD     		pop	{r7, pc}
 477              	.L26:
 478 0016 C046     		.align	2
 479              	.L25:
 480 0018 04003A40 		.word	1077542916
 481              		.cfi_endproc
 482              	.LFE6:
 483              		.size	ADC_SAR_Seq_1_StartConvert, .-ADC_SAR_Seq_1_StartConvert
 484              		.section	.text.ADC_SAR_Seq_1_StopConvert,"ax",%progbits
 485              		.align	2
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 16


 486              		.global	ADC_SAR_Seq_1_StopConvert
 487              		.code	16
 488              		.thumb_func
 489              		.type	ADC_SAR_Seq_1_StopConvert, %function
 490              	ADC_SAR_Seq_1_StopConvert:
 491              	.LFB7:
 365:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 366:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 367:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 368:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StopConvert
 369:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 370:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 371:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 372:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Forces the ADC to stop all conversions.
 373:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 374:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 375:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 376:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 377:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 378:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 380:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 381:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StopConvert(void)
 382:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 492              		.loc 1 382 0
 493              		.cfi_startproc
 494 0000 80B5     		push	{r7, lr}
 495              		.cfi_def_cfa_offset 8
 496              		.cfi_offset 7, -8
 497              		.cfi_offset 14, -4
 498 0002 00AF     		add	r7, sp, #0
 499              		.cfi_def_cfa_register 7
 383:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 384:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_SAR_Seq_1_CONTINUOUS_EN);
 500              		.loc 1 384 0
 501 0004 034B     		ldr	r3, .L28
 502 0006 034A     		ldr	r2, .L28
 503 0008 1168     		ldr	r1, [r2]
 504 000a 034A     		ldr	r2, .L28+4
 505 000c 0A40     		and	r2, r1
 506 000e 1A60     		str	r2, [r3]
 385:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 386:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 507              		.loc 1 386 0
 508 0010 BD46     		mov	sp, r7
 509              		@ sp needed
 510 0012 80BD     		pop	{r7, pc}
 511              	.L29:
 512              		.align	2
 513              	.L28:
 514 0014 04003A40 		.word	1077542916
 515 0018 FFFFFEFF 		.word	-65537
 516              		.cfi_endproc
 517              	.LFE7:
 518              		.size	ADC_SAR_Seq_1_StopConvert, .-ADC_SAR_Seq_1_StopConvert
 519              		.section	.text.ADC_SAR_Seq_1_IsEndConversion,"ax",%progbits
 520              		.align	2
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 17


 521              		.global	ADC_SAR_Seq_1_IsEndConversion
 522              		.code	16
 523              		.thumb_func
 524              		.type	ADC_SAR_Seq_1_IsEndConversion, %function
 525              	ADC_SAR_Seq_1_IsEndConversion:
 526              	.LFB8:
 387:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 388:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 389:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 390:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_IsEndConversion
 391:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 392:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 393:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 394:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Checks for ADC end of conversion for the case one
 395:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channel and end of scan for the case of multiple channels. It acts
 396:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  as a software version of the EOC. This function provides the
 397:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  programmer with two options. In one mode this function
 398:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  immediately returns with the conversion status. In the other mode,
 399:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  the function does not return (blocking) until the conversion has
 400:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  completed.
 401:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 402:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 403:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 404:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 405:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 406:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              for injection channel
 407:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 408:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              channel conversion
 409:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 410:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 411:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 412:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 413:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 414:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 415:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint32 ADC_SAR_Seq_1_IsEndConversion(uint32 retMode)
 416:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 527              		.loc 1 416 0
 528              		.cfi_startproc
 529 0000 80B5     		push	{r7, lr}
 530              		.cfi_def_cfa_offset 8
 531              		.cfi_offset 7, -8
 532              		.cfi_offset 14, -4
 533 0002 84B0     		sub	sp, sp, #16
 534              		.cfi_def_cfa_offset 24
 535 0004 00AF     		add	r7, sp, #0
 536              		.cfi_def_cfa_register 7
 537 0006 7860     		str	r0, [r7, #4]
 417:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 status = 0u;
 538              		.loc 1 417 0
 539 0008 0023     		mov	r3, #0
 540 000a FB60     		str	r3, [r7, #12]
 418:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 419:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS | ADC_SAR_Seq_1_WAIT_FOR_RESULT)) != 0u)
 541              		.loc 1 419 0
 542 000c 7A68     		ldr	r2, [r7, #4]
 543 000e 0323     		mov	r3, #3
 544 0010 1340     		and	r3, r2
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 18


 545 0012 11D0     		beq	.L31
 546              	.L33:
 420:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 421:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         do
 422:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 423:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             status = ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_EOS_MASK;
 547              		.loc 1 423 0 discriminator 1
 548 0014 0B4B     		ldr	r3, .L35
 549 0016 1A68     		ldr	r2, [r3]
 550 0018 0123     		mov	r3, #1
 551 001a 1340     		and	r3, r2
 552 001c FB60     		str	r3, [r7, #12]
 424:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }while((status == 0u) && ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT) != 0u));
 553              		.loc 1 424 0 discriminator 1
 554 001e FB68     		ldr	r3, [r7, #12]
 555 0020 002B     		cmp	r3, #0
 556 0022 03D1     		bne	.L32
 557 0024 7A68     		ldr	r2, [r7, #4]
 558 0026 0223     		mov	r3, #2
 559 0028 1340     		and	r3, r2
 560 002a F3D1     		bne	.L33
 561              	.L32:
 425:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 426:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(status != 0u)
 562              		.loc 1 426 0
 563 002c FB68     		ldr	r3, [r7, #12]
 564 002e 002B     		cmp	r3, #0
 565 0030 02D0     		beq	.L31
 427:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 428:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             /* Clear EOS bit */
 429:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_EOS_MASK;
 566              		.loc 1 429 0
 567 0032 044B     		ldr	r3, .L35
 568 0034 0122     		mov	r2, #1
 569 0036 1A60     		str	r2, [r3]
 570              	.L31:
 430:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 431:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 432:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 433:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 434:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS_INJ | ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ)) != 0u)
 435:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 436:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             do
 437:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 438:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 status |= ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_INJ_EOC_MASK;
 439:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }while(((status & ADC_SAR_Seq_1_INJ_EOC_MASK) == 0u) &&
 440:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ) != 0u));
 441:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 442:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((status & ADC_SAR_Seq_1_INJ_EOC_MASK) != 0u)
 443:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 444:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Clear Injection EOS bit */
 445:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_INJ_EOC_MASK;
 446:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 447:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 448:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 449:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 450:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return (status);
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 19


 571              		.loc 1 450 0
 572 0038 FB68     		ldr	r3, [r7, #12]
 451:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 573              		.loc 1 451 0
 574 003a 181C     		mov	r0, r3
 575 003c BD46     		mov	sp, r7
 576 003e 04B0     		add	sp, sp, #16
 577              		@ sp needed
 578 0040 80BD     		pop	{r7, pc}
 579              	.L36:
 580 0042 C046     		.align	2
 581              	.L35:
 582 0044 10023A40 		.word	1077543440
 583              		.cfi_endproc
 584              	.LFE8:
 585              		.size	ADC_SAR_Seq_1_IsEndConversion, .-ADC_SAR_Seq_1_IsEndConversion
 586              		.section	.text.ADC_SAR_Seq_1_GetResult16,"ax",%progbits
 587              		.align	2
 588              		.global	ADC_SAR_Seq_1_GetResult16
 589              		.code	16
 590              		.thumb_func
 591              		.type	ADC_SAR_Seq_1_GetResult16, %function
 592              	ADC_SAR_Seq_1_GetResult16:
 593              	.LFB9:
 452:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 453:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 454:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 455:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_GetResult16
 456:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 457:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 458:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 459:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Gets the data available in the SAR DATA register.
 460:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 461:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 462:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: The ADC channel in which to return the result. The first channel
 463:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 464:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 465:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 466:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Returns converted data as a signed 16-bit integer
 467:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 468:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 469:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** int16 ADC_SAR_Seq_1_GetResult16(uint32 chan)
 470:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 594              		.loc 1 470 0
 595              		.cfi_startproc
 596 0000 80B5     		push	{r7, lr}
 597              		.cfi_def_cfa_offset 8
 598              		.cfi_offset 7, -8
 599              		.cfi_offset 14, -4
 600 0002 84B0     		sub	sp, sp, #16
 601              		.cfi_def_cfa_offset 24
 602 0004 00AF     		add	r7, sp, #0
 603              		.cfi_def_cfa_register 7
 604 0006 7860     		str	r0, [r7, #4]
 471:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 result;
 472:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 473:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 20


 474:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 605              		.loc 1 474 0
 606 0008 7B68     		ldr	r3, [r7, #4]
 607 000a 032B     		cmp	r3, #3
 608 000c 02D9     		bls	.L38
 609              		.loc 1 474 0 is_stmt 0 discriminator 1
 610 000e 0020     		mov	r0, #0
 611 0010 FFF7FEFF 		bl	CyHalt
 612              	.L38:
 475:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 476:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(chan < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 613              		.loc 1 476 0 is_stmt 1
 614 0014 7B68     		ldr	r3, [r7, #4]
 615 0016 032B     		cmp	r3, #3
 616 0018 08D8     		bhi	.L39
 477:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 478:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) 
 617              		.loc 1 478 0
 618 001a 7B68     		ldr	r3, [r7, #4]
 619 001c 9B00     		lsl	r3, r3, #2
 620 001e 084A     		ldr	r2, .L42
 621 0020 9B18     		add	r3, r3, r2
 622 0022 1B68     		ldr	r3, [r3]
 623 0024 1B04     		lsl	r3, r3, #16
 624 0026 1B0C     		lsr	r3, r3, #16
 625 0028 FB60     		str	r3, [r7, #12]
 626 002a 01E0     		b	.L40
 627              	.L39:
 479:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_RESULT_MASK;
 480:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 481:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     else
 482:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 483:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 484:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = ADC_SAR_Seq_1_SAR_INJ_RESULT_REG & ADC_SAR_Seq_1_RESULT_MASK;
 485:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 486:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = 0u;
 628              		.loc 1 486 0
 629 002c 0023     		mov	r3, #0
 630 002e FB60     		str	r3, [r7, #12]
 631              	.L40:
 487:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 488:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 489:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 490:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return ( (int16)result );
 632              		.loc 1 490 0
 633 0030 FB68     		ldr	r3, [r7, #12]
 634 0032 9BB2     		uxth	r3, r3
 635 0034 1BB2     		sxth	r3, r3
 491:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 636              		.loc 1 491 0
 637 0036 181C     		mov	r0, r3
 638 0038 BD46     		mov	sp, r7
 639 003a 04B0     		add	sp, sp, #16
 640              		@ sp needed
 641 003c 80BD     		pop	{r7, pc}
 642              	.L43:
 643 003e C046     		.align	2
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 21


 644              	.L42:
 645 0040 80013A40 		.word	1077543296
 646              		.cfi_endproc
 647              	.LFE9:
 648              		.size	ADC_SAR_Seq_1_GetResult16, .-ADC_SAR_Seq_1_GetResult16
 649              		.section	.text.ADC_SAR_Seq_1_SetChanMask,"ax",%progbits
 650              		.align	2
 651              		.global	ADC_SAR_Seq_1_SetChanMask
 652              		.code	16
 653              		.thumb_func
 654              		.type	ADC_SAR_Seq_1_SetChanMask, %function
 655              	ADC_SAR_Seq_1_SetChanMask:
 656              	.LFB10:
 492:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 493:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 494:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 495:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetChanMask
 496:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 497:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 498:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 499:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel enable mask.
 500:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 501:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 502:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that will be
 503:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  scanned. Setting bits for channels that do not exist will have no
 504:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  effect. For example, if only 6 channels were enabled, setting a
 505:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 506:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This API will not enable the injection channel.
 507:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Examples: If the component is setup to sequence through 8
 508:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 509:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 510:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 511:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 512:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 513:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 514:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetChanMask(uint32 mask)
 515:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 657              		.loc 1 515 0
 658              		.cfi_startproc
 659 0000 80B5     		push	{r7, lr}
 660              		.cfi_def_cfa_offset 8
 661              		.cfi_offset 7, -8
 662              		.cfi_offset 14, -4
 663 0002 82B0     		sub	sp, sp, #8
 664              		.cfi_def_cfa_offset 16
 665 0004 00AF     		add	r7, sp, #0
 666              		.cfi_def_cfa_register 7
 667 0006 7860     		str	r0, [r7, #4]
 516:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 668              		.loc 1 516 0
 669 0008 034B     		ldr	r3, .L45
 670 000a 7968     		ldr	r1, [r7, #4]
 671 000c 0F22     		mov	r2, #15
 672 000e 0A40     		and	r2, r1
 673 0010 1A60     		str	r2, [r3]
 517:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 674              		.loc 1 517 0
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 22


 675 0012 BD46     		mov	sp, r7
 676 0014 02B0     		add	sp, sp, #8
 677              		@ sp needed
 678 0016 80BD     		pop	{r7, pc}
 679              	.L46:
 680              		.align	2
 681              	.L45:
 682 0018 20003A40 		.word	1077542944
 683              		.cfi_endproc
 684              	.LFE10:
 685              		.size	ADC_SAR_Seq_1_SetChanMask, .-ADC_SAR_Seq_1_SetChanMask
 686              		.section	.text.ADC_SAR_Seq_1_SetLowLimit,"ax",%progbits
 687              		.align	2
 688              		.global	ADC_SAR_Seq_1_SetLowLimit
 689              		.code	16
 690              		.thumb_func
 691              		.type	ADC_SAR_Seq_1_SetLowLimit, %function
 692              	ADC_SAR_Seq_1_SetLowLimit:
 693              	.LFB11:
 518:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 519:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 521:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 522:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 523:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_EnableInjection
 524:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 525:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 526:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 527:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Enables the injection channel for the next scan only.
 528:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 529:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 530:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 531:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 532:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 533:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 535:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 536:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     void ADC_SAR_Seq_1_EnableInjection(void)
 537:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 538:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_REG |= ADC_SAR_Seq_1_INJ_CHAN_EN;
 539:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 540:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 541:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 542:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 543:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 544:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 545:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLowLimit
 546:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 547:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 548:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 549:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 550:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 551:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 552:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  lowLimit: The low limit for a limit condition.
 553:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 554:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 555:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 23


 556:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 557:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 558:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLowLimit(uint32 lowLimit)
 559:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 694              		.loc 1 559 0
 695              		.cfi_startproc
 696 0000 80B5     		push	{r7, lr}
 697              		.cfi_def_cfa_offset 8
 698              		.cfi_offset 7, -8
 699              		.cfi_offset 14, -4
 700 0002 82B0     		sub	sp, sp, #8
 701              		.cfi_def_cfa_offset 16
 702 0004 00AF     		add	r7, sp, #0
 703              		.cfi_def_cfa_register 7
 704 0006 7860     		str	r0, [r7, #4]
 560:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_LOW_MASK);
 705              		.loc 1 560 0
 706 0008 084B     		ldr	r3, .L48
 707 000a 084A     		ldr	r2, .L48
 708 000c 1268     		ldr	r2, [r2]
 709 000e 120C     		lsr	r2, r2, #16
 710 0010 1204     		lsl	r2, r2, #16
 711 0012 1A60     		str	r2, [r3]
 561:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= lowLimit & ADC_SAR_Seq_1_RANGE_LOW_MASK;
 712              		.loc 1 561 0
 713 0014 054B     		ldr	r3, .L48
 714 0016 054A     		ldr	r2, .L48
 715 0018 1168     		ldr	r1, [r2]
 716 001a 7A68     		ldr	r2, [r7, #4]
 717 001c 1204     		lsl	r2, r2, #16
 718 001e 120C     		lsr	r2, r2, #16
 719 0020 0A43     		orr	r2, r1
 720 0022 1A60     		str	r2, [r3]
 562:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 721              		.loc 1 562 0
 722 0024 BD46     		mov	sp, r7
 723 0026 02B0     		add	sp, sp, #8
 724              		@ sp needed
 725 0028 80BD     		pop	{r7, pc}
 726              	.L49:
 727 002a C046     		.align	2
 728              	.L48:
 729 002c 18003A40 		.word	1077542936
 730              		.cfi_endproc
 731              	.LFE11:
 732              		.size	ADC_SAR_Seq_1_SetLowLimit, .-ADC_SAR_Seq_1_SetLowLimit
 733              		.section	.text.ADC_SAR_Seq_1_SetHighLimit,"ax",%progbits
 734              		.align	2
 735              		.global	ADC_SAR_Seq_1_SetHighLimit
 736              		.code	16
 737              		.thumb_func
 738              		.type	ADC_SAR_Seq_1_SetHighLimit, %function
 739              	ADC_SAR_Seq_1_SetHighLimit:
 740              	.LFB12:
 563:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 564:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 565:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 24


 566:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetHighLimit
 567:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 568:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 569:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 570:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 571:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 572:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 573:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  highLimit: The high limit for a limit condition.
 574:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 575:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 576:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 577:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 578:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 579:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetHighLimit(uint32 highLimit)
 580:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 741              		.loc 1 580 0
 742              		.cfi_startproc
 743 0000 80B5     		push	{r7, lr}
 744              		.cfi_def_cfa_offset 8
 745              		.cfi_offset 7, -8
 746              		.cfi_offset 14, -4
 747 0002 82B0     		sub	sp, sp, #8
 748              		.cfi_def_cfa_offset 16
 749 0004 00AF     		add	r7, sp, #0
 750              		.cfi_def_cfa_register 7
 751 0006 7860     		str	r0, [r7, #4]
 581:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_HIGH_MASK);
 752              		.loc 1 581 0
 753 0008 074B     		ldr	r3, .L51
 754 000a 074A     		ldr	r2, .L51
 755 000c 1268     		ldr	r2, [r2]
 756 000e 1204     		lsl	r2, r2, #16
 757 0010 120C     		lsr	r2, r2, #16
 758 0012 1A60     		str	r2, [r3]
 582:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_SAR_Seq_1_RANGE_HIGH_OFFSET);
 759              		.loc 1 582 0
 760 0014 044B     		ldr	r3, .L51
 761 0016 044A     		ldr	r2, .L51
 762 0018 1168     		ldr	r1, [r2]
 763 001a 7A68     		ldr	r2, [r7, #4]
 764 001c 1204     		lsl	r2, r2, #16
 765 001e 0A43     		orr	r2, r1
 766 0020 1A60     		str	r2, [r3]
 583:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 767              		.loc 1 583 0
 768 0022 BD46     		mov	sp, r7
 769 0024 02B0     		add	sp, sp, #8
 770              		@ sp needed
 771 0026 80BD     		pop	{r7, pc}
 772              	.L52:
 773              		.align	2
 774              	.L51:
 775 0028 18003A40 		.word	1077542936
 776              		.cfi_endproc
 777              	.LFE12:
 778              		.size	ADC_SAR_Seq_1_SetHighLimit, .-ADC_SAR_Seq_1_SetHighLimit
 779              		.section	.text.ADC_SAR_Seq_1_SetLimitMask,"ax",%progbits
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 25


 780              		.align	2
 781              		.global	ADC_SAR_Seq_1_SetLimitMask
 782              		.code	16
 783              		.thumb_func
 784              		.type	ADC_SAR_Seq_1_SetLimitMask, %function
 785              	ADC_SAR_Seq_1_SetLimitMask:
 786              	.LFB13:
 584:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 585:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 586:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 587:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLimitMask
 588:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 589:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 590:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 591:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel limit condition mask.
 592:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 593:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 594:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 595:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 596:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 6 channels were enabled,
 597:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 598:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 599:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 600:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 601:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 602:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 603:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLimitMask(uint32 mask)
 604:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 787              		.loc 1 604 0
 788              		.cfi_startproc
 789 0000 80B5     		push	{r7, lr}
 790              		.cfi_def_cfa_offset 8
 791              		.cfi_offset 7, -8
 792              		.cfi_offset 14, -4
 793 0002 82B0     		sub	sp, sp, #8
 794              		.cfi_def_cfa_offset 16
 795 0004 00AF     		add	r7, sp, #0
 796              		.cfi_def_cfa_register 7
 797 0006 7860     		str	r0, [r7, #4]
 605:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 798              		.loc 1 605 0
 799 0008 034B     		ldr	r3, .L54
 800 000a 7968     		ldr	r1, [r7, #4]
 801 000c 0F22     		mov	r2, #15
 802 000e 0A40     		and	r2, r1
 803 0010 1A60     		str	r2, [r3]
 606:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 804              		.loc 1 606 0
 805 0012 BD46     		mov	sp, r7
 806 0014 02B0     		add	sp, sp, #8
 807              		@ sp needed
 808 0016 80BD     		pop	{r7, pc}
 809              	.L55:
 810              		.align	2
 811              	.L54:
 812 0018 38023A40 		.word	1077543480
 813              		.cfi_endproc
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 26


 814              	.LFE13:
 815              		.size	ADC_SAR_Seq_1_SetLimitMask, .-ADC_SAR_Seq_1_SetLimitMask
 816              		.section	.text.ADC_SAR_Seq_1_SetSatMask,"ax",%progbits
 817              		.align	2
 818              		.global	ADC_SAR_Seq_1_SetSatMask
 819              		.code	16
 820              		.thumb_func
 821              		.type	ADC_SAR_Seq_1_SetSatMask, %function
 822              	ADC_SAR_Seq_1_SetSatMask:
 823              	.LFB14:
 607:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 608:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 609:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 610:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetSatMask
 611:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 612:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 613:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 614:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel saturation event mask.
 615:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 616:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 617:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 618:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 619:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 8 channels were enabled,
 620:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 621:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 622:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 623:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 624:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 625:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 626:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetSatMask(uint32 mask)
 627:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 824              		.loc 1 627 0
 825              		.cfi_startproc
 826 0000 80B5     		push	{r7, lr}
 827              		.cfi_def_cfa_offset 8
 828              		.cfi_offset 7, -8
 829              		.cfi_offset 14, -4
 830 0002 82B0     		sub	sp, sp, #8
 831              		.cfi_def_cfa_offset 16
 832 0004 00AF     		add	r7, sp, #0
 833              		.cfi_def_cfa_register 7
 834 0006 7860     		str	r0, [r7, #4]
 628:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 835              		.loc 1 628 0
 836 0008 034B     		ldr	r3, .L57
 837 000a 7968     		ldr	r1, [r7, #4]
 838 000c 0F22     		mov	r2, #15
 839 000e 0A40     		and	r2, r1
 840 0010 1A60     		str	r2, [r3]
 629:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 841              		.loc 1 629 0
 842 0012 BD46     		mov	sp, r7
 843 0014 02B0     		add	sp, sp, #8
 844              		@ sp needed
 845 0016 80BD     		pop	{r7, pc}
 846              	.L58:
 847              		.align	2
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 27


 848              	.L57:
 849 0018 28023A40 		.word	1077543464
 850              		.cfi_endproc
 851              	.LFE14:
 852              		.size	ADC_SAR_Seq_1_SetSatMask, .-ADC_SAR_Seq_1_SetSatMask
 853              		.section	.text.ADC_SAR_Seq_1_SetOffset,"ax",%progbits
 854              		.align	2
 855              		.global	ADC_SAR_Seq_1_SetOffset
 856              		.code	16
 857              		.thumb_func
 858              		.type	ADC_SAR_Seq_1_SetOffset, %function
 859              	ADC_SAR_Seq_1_SetOffset:
 860              	.LFB15:
 630:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 631:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 632:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 633:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetOffset
 634:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 635:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 636:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 637:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   Description: Sets the ADC offset which is used by the functions
 638:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 639:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   to substract the offset from the given reading
 640:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   before calculating the voltage conversion.
 641:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 642:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 643:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 644:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  offset: This value is a measured value when the
 645:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *          inputs are shorted or connected to the same input voltage.
 646:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 647:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 648:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 649:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 650:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 651:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Offset:  Modified to set the user provided offset.
 652:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 653:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 654:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetOffset(uint32 chan, int16 offset)
 655:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 861              		.loc 1 655 0
 862              		.cfi_startproc
 863 0000 80B5     		push	{r7, lr}
 864              		.cfi_def_cfa_offset 8
 865              		.cfi_offset 7, -8
 866              		.cfi_offset 14, -4
 867 0002 82B0     		sub	sp, sp, #8
 868              		.cfi_def_cfa_offset 16
 869 0004 00AF     		add	r7, sp, #0
 870              		.cfi_def_cfa_register 7
 871 0006 7860     		str	r0, [r7, #4]
 872 0008 0A1C     		mov	r2, r1
 873 000a BB1C     		add	r3, r7, #2
 874 000c 1A80     		strh	r2, [r3]
 656:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 657:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 875              		.loc 1 657 0
 876 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 28


 877 0010 032B     		cmp	r3, #3
 878 0012 02D9     		bls	.L60
 879              		.loc 1 657 0 is_stmt 0 discriminator 1
 880 0014 0020     		mov	r0, #0
 881 0016 FFF7FEFF 		bl	CyHalt
 882              	.L60:
 658:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 659:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_offset[chan] = offset;
 883              		.loc 1 659 0 is_stmt 1
 884 001a 044B     		ldr	r3, .L61
 885 001c 7A68     		ldr	r2, [r7, #4]
 886 001e 5200     		lsl	r2, r2, #1
 887 0020 B91C     		add	r1, r7, #2
 888 0022 0988     		ldrh	r1, [r1]
 889 0024 D152     		strh	r1, [r2, r3]
 660:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 890              		.loc 1 660 0
 891 0026 BD46     		mov	sp, r7
 892 0028 02B0     		add	sp, sp, #8
 893              		@ sp needed
 894 002a 80BD     		pop	{r7, pc}
 895              	.L62:
 896              		.align	2
 897              	.L61:
 898 002c 00000000 		.word	ADC_SAR_Seq_1_offset
 899              		.cfi_endproc
 900              	.LFE15:
 901              		.size	ADC_SAR_Seq_1_SetOffset, .-ADC_SAR_Seq_1_SetOffset
 902              		.section	.text.ADC_SAR_Seq_1_SetGain,"ax",%progbits
 903              		.align	2
 904              		.global	ADC_SAR_Seq_1_SetGain
 905              		.code	16
 906              		.thumb_func
 907              		.type	ADC_SAR_Seq_1_SetGain, %function
 908              	ADC_SAR_Seq_1_SetGain:
 909              	.LFB16:
 661:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 662:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 663:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 664:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetGain
 665:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 666:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 667:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 668:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 669:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion functions below. This value is set by default by the
 670:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  reference and input range settings. It should only be used to further
 671:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  calibrate the ADC with a known input or if an external reference is
 672:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 673:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 674:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion between ADC counts and voltage.
 675:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 676:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 677:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 678:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  adcGain: ADC gain in counts per 10 volts.
 679:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 680:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 681:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 29


 682:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 683:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 684:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_CountsPer10Volt:  modified to set the ADC gain in counts
 685:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   per 10 volt.
 686:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 687:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 688:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetGain(uint32 chan, int32 adcGain)
 689:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 910              		.loc 1 689 0
 911              		.cfi_startproc
 912 0000 80B5     		push	{r7, lr}
 913              		.cfi_def_cfa_offset 8
 914              		.cfi_offset 7, -8
 915              		.cfi_offset 14, -4
 916 0002 82B0     		sub	sp, sp, #8
 917              		.cfi_def_cfa_offset 16
 918 0004 00AF     		add	r7, sp, #0
 919              		.cfi_def_cfa_register 7
 920 0006 7860     		str	r0, [r7, #4]
 921 0008 3960     		str	r1, [r7]
 690:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 691:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 922              		.loc 1 691 0
 923 000a 7B68     		ldr	r3, [r7, #4]
 924 000c 032B     		cmp	r3, #3
 925 000e 02D9     		bls	.L64
 926              		.loc 1 691 0 is_stmt 0 discriminator 1
 927 0010 0020     		mov	r0, #0
 928 0012 FFF7FEFF 		bl	CyHalt
 929              	.L64:
 692:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 693:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_countsPer10Volt[chan] = adcGain;
 930              		.loc 1 693 0 is_stmt 1
 931 0016 044B     		ldr	r3, .L65
 932 0018 7A68     		ldr	r2, [r7, #4]
 933 001a 9200     		lsl	r2, r2, #2
 934 001c 3968     		ldr	r1, [r7]
 935 001e D150     		str	r1, [r2, r3]
 694:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 936              		.loc 1 694 0
 937 0020 BD46     		mov	sp, r7
 938 0022 02B0     		add	sp, sp, #8
 939              		@ sp needed
 940 0024 80BD     		pop	{r7, pc}
 941              	.L66:
 942 0026 C046     		.align	2
 943              	.L65:
 944 0028 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 945              		.cfi_endproc
 946              	.LFE16:
 947              		.size	ADC_SAR_Seq_1_SetGain, .-ADC_SAR_Seq_1_SetGain
 948              		.section	.text.ADC_SAR_Seq_1_CountsTo_mVolts,"ax",%progbits
 949              		.align	2
 950              		.global	ADC_SAR_Seq_1_CountsTo_mVolts
 951              		.code	16
 952              		.thumb_func
 953              		.type	ADC_SAR_Seq_1_CountsTo_mVolts, %function
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 30


 954              	ADC_SAR_Seq_1_CountsTo_mVolts:
 955              	.LFB17:
 695:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 696:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 697:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_DEFAULT_JUSTIFICATION_SEL == ADC_SAR_Seq_1__RIGHT)
 698:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 699:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 700:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 701:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_mVolts
 702:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 703:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 704:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 705:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to mVolts
 706:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 707:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 708:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 709:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 710:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 711:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 712:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 713:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in mVolts
 714:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 715:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 716:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to mVolts.
 717:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 718:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 719:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 720:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 721:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int16 ADC_SAR_Seq_1_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 722:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 956              		.loc 1 722 0
 957              		.cfi_startproc
 958 0000 80B5     		push	{r7, lr}
 959              		.cfi_def_cfa_offset 8
 960              		.cfi_offset 7, -8
 961              		.cfi_offset 14, -4
 962 0002 84B0     		sub	sp, sp, #16
 963              		.cfi_def_cfa_offset 24
 964 0004 00AF     		add	r7, sp, #0
 965              		.cfi_def_cfa_register 7
 966 0006 7860     		str	r0, [r7, #4]
 967 0008 0A1C     		mov	r2, r1
 968 000a BB1C     		add	r3, r7, #2
 969 000c 1A80     		strh	r2, [r3]
 723:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int16 mVolts;
 724:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 725:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 970              		.loc 1 726 0
 971 000e 7B68     		ldr	r3, [r7, #4]
 972 0010 032B     		cmp	r3, #3
 973 0012 02D9     		bls	.L68
 974              		.loc 1 726 0 is_stmt 0 discriminator 1
 975 0014 0020     		mov	r0, #0
 976 0016 FFF7FEFF 		bl	CyHalt
 977              	.L68:
 727:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 31


 728:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 729:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 730:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 731:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 732:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 733:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 734:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 735:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 736:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 737:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 978              		.loc 1 737 0 is_stmt 1
 979 001a BB1C     		add	r3, r7, #2
 980 001c 1A88     		ldrh	r2, [r3]
 981 001e 1E4B     		ldr	r3, .L74
 982 0020 7968     		ldr	r1, [r7, #4]
 983 0022 4900     		lsl	r1, r1, #1
 984 0024 CB5A     		ldrh	r3, [r1, r3]
 985 0026 9BB2     		uxth	r3, r3
 986 0028 9BB2     		uxth	r3, r3
 987 002a D31A     		sub	r3, r2, r3
 988 002c 9AB2     		uxth	r2, r3
 989 002e BB1C     		add	r3, r7, #2
 990 0030 1A80     		strh	r2, [r3]
 738:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 739:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 991              		.loc 1 739 0
 992 0032 BB1C     		add	r3, r7, #2
 993 0034 0021     		mov	r1, #0
 994 0036 5B5E     		ldrsh	r3, [r3, r1]
 995 0038 184A     		ldr	r2, .L74+4
 996 003a 5A43     		mul	r2, r3
 740:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 997              		.loc 1 740 0
 998 003c BB1C     		add	r3, r7, #2
 999 003e 0021     		mov	r1, #0
 1000 0040 5B5E     		ldrsh	r3, [r3, r1]
 1001 0042 002B     		cmp	r3, #0
 1002 0044 08DD     		ble	.L69
 1003              		.loc 1 740 0 is_stmt 0 discriminator 1
 1004 0046 164B     		ldr	r3, .L74+8
 1005 0048 7968     		ldr	r1, [r7, #4]
 1006 004a 8900     		lsl	r1, r1, #2
 1007 004c CB58     		ldr	r3, [r1, r3]
 1008 004e 002B     		cmp	r3, #0
 1009 0050 00DA     		bge	.L70
 1010 0052 0133     		add	r3, r3, #1
 1011              	.L70:
 1012 0054 5B10     		asr	r3, r3, #1
 1013 0056 08E0     		b	.L71
 1014              	.L69:
 1015              		.loc 1 740 0 discriminator 2
 1016 0058 114B     		ldr	r3, .L74+8
 1017 005a 7968     		ldr	r1, [r7, #4]
 1018 005c 8900     		lsl	r1, r1, #2
 1019 005e CB58     		ldr	r3, [r1, r3]
 1020 0060 002B     		cmp	r3, #0
 1021 0062 00DA     		bge	.L72
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 32


 1022 0064 0133     		add	r3, r3, #1
 1023              	.L72:
 1024 0066 5B10     		asr	r3, r3, #1
 1025 0068 5B42     		neg	r3, r3
 1026              	.L71:
 739:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 1027              		.loc 1 739 0 is_stmt 1
 1028 006a D218     		add	r2, r2, r3
 741:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  / ADC_SAR_Seq_1_countsPer10Volt[chan]);
 1029              		.loc 1 741 0
 1030 006c 0C4B     		ldr	r3, .L74+8
 1031 006e 7968     		ldr	r1, [r7, #4]
 1032 0070 8900     		lsl	r1, r1, #2
 1033 0072 CB58     		ldr	r3, [r1, r3]
 1034 0074 101C     		mov	r0, r2
 1035 0076 191C     		mov	r1, r3
 1036 0078 FFF7FEFF 		bl	__aeabi_idiv
 1037 007c 031C     		mov	r3, r0
 1038 007e 1A1C     		mov	r2, r3
 739:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 1039              		.loc 1 739 0
 1040 0080 3B1C     		mov	r3, r7
 1041 0082 0E33     		add	r3, r3, #14
 1042 0084 1A80     		strh	r2, [r3]
 742:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 743:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( mVolts );
 1043              		.loc 1 743 0
 1044 0086 3B1C     		mov	r3, r7
 1045 0088 0E33     		add	r3, r3, #14
 1046 008a 1B88     		ldrh	r3, [r3]
 1047 008c 1BB2     		sxth	r3, r3
 744:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1048              		.loc 1 744 0
 1049 008e 181C     		mov	r0, r3
 1050 0090 BD46     		mov	sp, r7
 1051 0092 04B0     		add	sp, sp, #16
 1052              		@ sp needed
 1053 0094 80BD     		pop	{r7, pc}
 1054              	.L75:
 1055 0096 C046     		.align	2
 1056              	.L74:
 1057 0098 00000000 		.word	ADC_SAR_Seq_1_offset
 1058 009c 10270000 		.word	10000
 1059 00a0 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1060              		.cfi_endproc
 1061              	.LFE17:
 1062              		.size	ADC_SAR_Seq_1_CountsTo_mVolts, .-ADC_SAR_Seq_1_CountsTo_mVolts
 1063              		.global	__aeabi_lmul
 1064              		.global	__aeabi_ldivmod
 1065              		.section	.text.ADC_SAR_Seq_1_CountsTo_uVolts,"ax",%progbits
 1066              		.align	2
 1067              		.global	ADC_SAR_Seq_1_CountsTo_uVolts
 1068              		.code	16
 1069              		.thumb_func
 1070              		.type	ADC_SAR_Seq_1_CountsTo_uVolts, %function
 1071              	ADC_SAR_Seq_1_CountsTo_uVolts:
 1072              	.LFB18:
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 33


 745:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 746:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 747:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 748:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_uVolts
 749:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 750:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 751:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 752:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to micro Volts
 753:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 754:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 755:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 756:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 757:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 758:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 759:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 760:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in uVolts
 761:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 762:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 763:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to uVolts.
 764:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 765:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 766:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 767:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Theory:
 768:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 769:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  number in the conversion to uVolts and at the same time not loose
 770:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  resolution.
 771:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 772:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  on 10 million and later divide on gain in counts per 10V.
 773:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 774:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 775:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 ADC_SAR_Seq_1_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 776:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 1073              		.loc 1 776 0
 1074              		.cfi_startproc
 1075 0000 B0B5     		push	{r4, r5, r7, lr}
 1076              		.cfi_def_cfa_offset 16
 1077              		.cfi_offset 4, -16
 1078              		.cfi_offset 5, -12
 1079              		.cfi_offset 7, -8
 1080              		.cfi_offset 14, -4
 1081 0002 86B0     		sub	sp, sp, #24
 1082              		.cfi_def_cfa_offset 40
 1083 0004 00AF     		add	r7, sp, #0
 1084              		.cfi_def_cfa_register 7
 1085 0006 F860     		str	r0, [r7, #12]
 1086 0008 0A1C     		mov	r2, r1
 1087 000a 3B1C     		mov	r3, r7
 1088 000c 0A33     		add	r3, r3, #10
 1089 000e 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int64 uVolts;
 778:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 779:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 780:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 1090              		.loc 1 780 0
 1091 0010 FB68     		ldr	r3, [r7, #12]
 1092 0012 032B     		cmp	r3, #3
 1093 0014 02D9     		bls	.L77
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 34


 1094              		.loc 1 780 0 is_stmt 0 discriminator 1
 1095 0016 0020     		mov	r0, #0
 1096 0018 FFF7FEFF 		bl	CyHalt
 1097              	.L77:
 781:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 782:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 783:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 784:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 785:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 786:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 787:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 788:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 789:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 790:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 791:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 1098              		.loc 1 791 0 is_stmt 1
 1099 001c 3B1C     		mov	r3, r7
 1100 001e 0A33     		add	r3, r3, #10
 1101 0020 1A88     		ldrh	r2, [r3]
 1102 0022 1B4B     		ldr	r3, .L79+8
 1103 0024 F968     		ldr	r1, [r7, #12]
 1104 0026 4900     		lsl	r1, r1, #1
 1105 0028 CB5A     		ldrh	r3, [r1, r3]
 1106 002a 9BB2     		uxth	r3, r3
 1107 002c 9BB2     		uxth	r3, r3
 1108 002e D31A     		sub	r3, r2, r3
 1109 0030 9AB2     		uxth	r2, r3
 1110 0032 3B1C     		mov	r3, r7
 1111 0034 0A33     		add	r3, r3, #10
 1112 0036 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 793:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         uVolts = ((int64)adcCounts * ADC_SAR_Seq_1_10UV_COUNTS) / ADC_SAR_Seq_1_countsPer10Volt[cha
 1113              		.loc 1 793 0
 1114 0038 3B1C     		mov	r3, r7
 1115 003a 0A33     		add	r3, r3, #10
 1116 003c 1B88     		ldrh	r3, [r3]
 1117 003e 1BB2     		sxth	r3, r3
 1118 0040 3B60     		str	r3, [r7]
 1119 0042 DB17     		asr	r3, r3, #31
 1120 0044 7B60     		str	r3, [r7, #4]
 1121 0046 3868     		ldr	r0, [r7]
 1122 0048 7968     		ldr	r1, [r7, #4]
 1123 004a 104B     		ldr	r3, .L79+4
 1124 004c 0E4A     		ldr	r2, .L79
 1125 004e FFF7FEFF 		bl	__aeabi_lmul
 1126 0052 021C     		mov	r2, r0
 1127 0054 0B1C     		mov	r3, r1
 1128 0056 0F49     		ldr	r1, .L79+12
 1129 0058 F868     		ldr	r0, [r7, #12]
 1130 005a 8000     		lsl	r0, r0, #2
 1131 005c 4158     		ldr	r1, [r0, r1]
 1132 005e 0C1C     		mov	r4, r1
 1133 0060 C917     		asr	r1, r1, #31
 1134 0062 0D1C     		mov	r5, r1
 1135 0064 101C     		mov	r0, r2
 1136 0066 191C     		mov	r1, r3
 1137 0068 221C     		mov	r2, r4
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 35


 1138 006a 2B1C     		mov	r3, r5
 1139 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1140 0070 031C     		mov	r3, r0
 1141 0072 0C1C     		mov	r4, r1
 1142 0074 3B61     		str	r3, [r7, #16]
 1143 0076 7C61     		str	r4, [r7, #20]
 794:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 795:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( (int32)uVolts );
 1144              		.loc 1 795 0
 1145 0078 3B69     		ldr	r3, [r7, #16]
 796:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1146              		.loc 1 796 0
 1147 007a 181C     		mov	r0, r3
 1148 007c BD46     		mov	sp, r7
 1149 007e 06B0     		add	sp, sp, #24
 1150              		@ sp needed
 1151 0080 B0BD     		pop	{r4, r5, r7, pc}
 1152              	.L80:
 1153 0082 C046C046 		.align	3
 1153      C046
 1154              	.L79:
 1155 0088 80969800 		.word	10000000
 1156 008c 00000000 		.word	0
 1157 0090 00000000 		.word	ADC_SAR_Seq_1_offset
 1158 0094 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1159              		.cfi_endproc
 1160              	.LFE18:
 1161              		.size	ADC_SAR_Seq_1_CountsTo_uVolts, .-ADC_SAR_Seq_1_CountsTo_uVolts
 1162              		.global	__aeabi_i2f
 1163              		.global	__aeabi_fmul
 1164              		.global	__aeabi_fdiv
 1165              		.section	.text.ADC_SAR_Seq_1_CountsTo_Volts,"ax",%progbits
 1166              		.align	2
 1167              		.global	ADC_SAR_Seq_1_CountsTo_Volts
 1168              		.code	16
 1169              		.thumb_func
 1170              		.type	ADC_SAR_Seq_1_CountsTo_Volts, %function
 1171              	ADC_SAR_Seq_1_CountsTo_Volts:
 1172              	.LFB19:
 797:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 798:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 799:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 800:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_Volts
 801:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 802:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 803:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 804:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Converts the ADC output to Volts as a floating point number.
 805:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 806:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 807:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 808:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 809:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Result from the ADC conversion
 810:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 811:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 812:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in Volts
 813:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 814:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 36


 815:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to Volts.
 816:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 817:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 818:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 819:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 820:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     float32 ADC_SAR_Seq_1_CountsTo_Volts(uint32 chan, int16 adcCounts)
 821:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 1173              		.loc 1 821 0
 1174              		.cfi_startproc
 1175 0000 90B5     		push	{r4, r7, lr}
 1176              		.cfi_def_cfa_offset 12
 1177              		.cfi_offset 4, -12
 1178              		.cfi_offset 7, -8
 1179              		.cfi_offset 14, -4
 1180 0002 85B0     		sub	sp, sp, #20
 1181              		.cfi_def_cfa_offset 32
 1182 0004 00AF     		add	r7, sp, #0
 1183              		.cfi_def_cfa_register 7
 1184 0006 7860     		str	r0, [r7, #4]
 1185 0008 0A1C     		mov	r2, r1
 1186 000a BB1C     		add	r3, r7, #2
 1187 000c 1A80     		strh	r2, [r3]
 822:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         float32 volts;
 823:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 824:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 825:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 1188              		.loc 1 825 0
 1189 000e 7B68     		ldr	r3, [r7, #4]
 1190 0010 032B     		cmp	r3, #3
 1191 0012 02D9     		bls	.L82
 1192              		.loc 1 825 0 is_stmt 0 discriminator 1
 1193 0014 0020     		mov	r0, #0
 1194 0016 FFF7FEFF 		bl	CyHalt
 1195              	.L82:
 826:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 827:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 828:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 829:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 830:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 831:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 832:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 833:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 834:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 835:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 836:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 1196              		.loc 1 836 0 is_stmt 1
 1197 001a BB1C     		add	r3, r7, #2
 1198 001c 1A88     		ldrh	r2, [r3]
 1199 001e 154B     		ldr	r3, .L84
 1200 0020 7968     		ldr	r1, [r7, #4]
 1201 0022 4900     		lsl	r1, r1, #1
 1202 0024 CB5A     		ldrh	r3, [r1, r3]
 1203 0026 9BB2     		uxth	r3, r3
 1204 0028 9BB2     		uxth	r3, r3
 1205 002a D31A     		sub	r3, r2, r3
 1206 002c 9AB2     		uxth	r2, r3
 1207 002e BB1C     		add	r3, r7, #2
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 37


 1208 0030 1A80     		strh	r2, [r3]
 837:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 838:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         volts = ((float32)adcCounts * ADC_SAR_Seq_1_10V_COUNTS) / (float32)ADC_SAR_Seq_1_countsPer1
 1209              		.loc 1 838 0
 1210 0032 BB1C     		add	r3, r7, #2
 1211 0034 0022     		mov	r2, #0
 1212 0036 9B5E     		ldrsh	r3, [r3, r2]
 1213 0038 181C     		mov	r0, r3
 1214 003a FFF7FEFF 		bl	__aeabi_i2f
 1215 003e 031C     		add	r3, r0, #0
 1216 0040 181C     		add	r0, r3, #0
 1217 0042 0D49     		ldr	r1, .L84+4
 1218 0044 FFF7FEFF 		bl	__aeabi_fmul
 1219 0048 031C     		add	r3, r0, #0
 1220 004a 1C1C     		add	r4, r3, #0
 1221 004c 0B4B     		ldr	r3, .L84+8
 1222 004e 7A68     		ldr	r2, [r7, #4]
 1223 0050 9200     		lsl	r2, r2, #2
 1224 0052 D358     		ldr	r3, [r2, r3]
 1225 0054 181C     		mov	r0, r3
 1226 0056 FFF7FEFF 		bl	__aeabi_i2f
 1227 005a 031C     		add	r3, r0, #0
 1228 005c 201C     		add	r0, r4, #0
 1229 005e 191C     		add	r1, r3, #0
 1230 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1231 0064 031C     		add	r3, r0, #0
 1232 0066 FB60     		str	r3, [r7, #12]
 839:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 840:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( volts );
 1233              		.loc 1 840 0
 1234 0068 FB68     		ldr	r3, [r7, #12]
 841:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1235              		.loc 1 841 0
 1236 006a 181C     		add	r0, r3, #0
 1237 006c BD46     		mov	sp, r7
 1238 006e 05B0     		add	sp, sp, #20
 1239              		@ sp needed
 1240 0070 90BD     		pop	{r4, r7, pc}
 1241              	.L85:
 1242 0072 C046     		.align	2
 1243              	.L84:
 1244 0074 00000000 		.word	ADC_SAR_Seq_1_offset
 1245 0078 00002041 		.word	1092616192
 1246 007c 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1247              		.cfi_endproc
 1248              	.LFE19:
 1249              		.size	ADC_SAR_Seq_1_CountsTo_Volts, .-ADC_SAR_Seq_1_CountsTo_Volts
 1250              		.section	.rodata
 1251              		.align	2
 1252              		.type	ADC_SAR_Seq_1_InputsPlacement.4747, %object
 1253              		.size	ADC_SAR_Seq_1_InputsPlacement.4747, 4
 1254              	ADC_SAR_Seq_1_InputsPlacement.4747:
 1255 0010 00       		.byte	0
 1256 0011 01       		.byte	1
 1257 0012 02       		.byte	2
 1258 0013 03       		.byte	3
 1259              		.text
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 38


 1260              	.Letext0:
 1261              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1262              		.section	.debug_info,"",%progbits
 1263              	.Ldebug_info0:
 1264 0000 96040000 		.4byte	0x496
 1265 0004 0400     		.2byte	0x4
 1266 0006 00000000 		.4byte	.Ldebug_abbrev0
 1267 000a 04       		.byte	0x4
 1268 000b 01       		.uleb128 0x1
 1269 000c D0020000 		.4byte	.LASF60
 1270 0010 01       		.byte	0x1
 1271 0011 14020000 		.4byte	.LASF61
 1272 0015 75020000 		.4byte	.LASF62
 1273 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1274 001d 00000000 		.4byte	0
 1275 0021 00000000 		.4byte	.Ldebug_line0
 1276 0025 02       		.uleb128 0x2
 1277 0026 01       		.byte	0x1
 1278 0027 06       		.byte	0x6
 1279 0028 F8000000 		.4byte	.LASF0
 1280 002c 02       		.uleb128 0x2
 1281 002d 01       		.byte	0x1
 1282 002e 08       		.byte	0x8
 1283 002f 7F030000 		.4byte	.LASF1
 1284 0033 02       		.uleb128 0x2
 1285 0034 02       		.byte	0x2
 1286 0035 05       		.byte	0x5
 1287 0036 8D030000 		.4byte	.LASF2
 1288 003a 02       		.uleb128 0x2
 1289 003b 02       		.byte	0x2
 1290 003c 07       		.byte	0x7
 1291 003d D7010000 		.4byte	.LASF3
 1292 0041 02       		.uleb128 0x2
 1293 0042 04       		.byte	0x4
 1294 0043 05       		.byte	0x5
 1295 0044 43010000 		.4byte	.LASF4
 1296 0048 02       		.uleb128 0x2
 1297 0049 04       		.byte	0x4
 1298 004a 07       		.byte	0x7
 1299 004b B5010000 		.4byte	.LASF5
 1300 004f 02       		.uleb128 0x2
 1301 0050 08       		.byte	0x8
 1302 0051 05       		.byte	0x5
 1303 0052 EA000000 		.4byte	.LASF6
 1304 0056 02       		.uleb128 0x2
 1305 0057 08       		.byte	0x8
 1306 0058 07       		.byte	0x7
 1307 0059 86000000 		.4byte	.LASF7
 1308 005d 03       		.uleb128 0x3
 1309 005e 04       		.byte	0x4
 1310 005f 05       		.byte	0x5
 1311 0060 696E7400 		.ascii	"int\000"
 1312 0064 02       		.uleb128 0x2
 1313 0065 04       		.byte	0x4
 1314 0066 07       		.byte	0x7
 1315 0067 A1010000 		.4byte	.LASF8
 1316 006b 04       		.uleb128 0x4
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 39


 1317 006c 4C010000 		.4byte	.LASF9
 1318 0070 02       		.byte	0x2
 1319 0071 A1       		.byte	0xa1
 1320 0072 2C000000 		.4byte	0x2c
 1321 0076 04       		.uleb128 0x4
 1322 0077 15000000 		.4byte	.LASF10
 1323 007b 02       		.byte	0x2
 1324 007c A2       		.byte	0xa2
 1325 007d 3A000000 		.4byte	0x3a
 1326 0081 04       		.uleb128 0x4
 1327 0082 59010000 		.4byte	.LASF11
 1328 0086 02       		.byte	0x2
 1329 0087 A3       		.byte	0xa3
 1330 0088 48000000 		.4byte	0x48
 1331 008c 04       		.uleb128 0x4
 1332 008d 46040000 		.4byte	.LASF12
 1333 0091 02       		.byte	0x2
 1334 0092 A5       		.byte	0xa5
 1335 0093 33000000 		.4byte	0x33
 1336 0097 04       		.uleb128 0x4
 1337 0098 1F010000 		.4byte	.LASF13
 1338 009c 02       		.byte	0x2
 1339 009d A6       		.byte	0xa6
 1340 009e 41000000 		.4byte	0x41
 1341 00a2 04       		.uleb128 0x4
 1342 00a3 3D020000 		.4byte	.LASF14
 1343 00a7 02       		.byte	0x2
 1344 00a8 A7       		.byte	0xa7
 1345 00a9 AD000000 		.4byte	0xad
 1346 00ad 02       		.uleb128 0x2
 1347 00ae 04       		.byte	0x4
 1348 00af 04       		.byte	0x4
 1349 00b0 CA020000 		.4byte	.LASF15
 1350 00b4 02       		.uleb128 0x2
 1351 00b5 08       		.byte	0x8
 1352 00b6 04       		.byte	0x4
 1353 00b7 52010000 		.4byte	.LASF16
 1354 00bb 04       		.uleb128 0x4
 1355 00bc C4020000 		.4byte	.LASF17
 1356 00c0 02       		.byte	0x2
 1357 00c1 AC       		.byte	0xac
 1358 00c2 4F000000 		.4byte	0x4f
 1359 00c6 02       		.uleb128 0x2
 1360 00c7 01       		.byte	0x1
 1361 00c8 08       		.byte	0x8
 1362 00c9 D9030000 		.4byte	.LASF18
 1363 00cd 05       		.uleb128 0x5
 1364 00ce 0E020000 		.4byte	.LASF19
 1365 00d2 02       		.byte	0x2
 1366 00d3 4D01     		.2byte	0x14d
 1367 00d5 D9000000 		.4byte	0xd9
 1368 00d9 06       		.uleb128 0x6
 1369 00da 81000000 		.4byte	0x81
 1370 00de 02       		.uleb128 0x2
 1371 00df 04       		.byte	0x4
 1372 00e0 07       		.byte	0x7
 1373 00e1 45020000 		.4byte	.LASF20
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 40


 1374 00e5 07       		.uleb128 0x7
 1375 00e6 72000000 		.4byte	.LASF25
 1376 00ea 01       		.byte	0x1
 1377 00eb 3F       		.byte	0x3f
 1378 00ec 00000000 		.4byte	.LFB2
 1379 00f0 24000000 		.4byte	.LFE2-.LFB2
 1380 00f4 01       		.uleb128 0x1
 1381 00f5 9C       		.byte	0x9c
 1382 00f6 08       		.uleb128 0x8
 1383 00f7 1C000000 		.4byte	.LASF36
 1384 00fb 01       		.byte	0x1
 1385 00fc 5E       		.byte	0x5e
 1386 00fd 00000000 		.4byte	.LFB3
 1387 0101 F0010000 		.4byte	.LFE3-.LFB3
 1388 0105 01       		.uleb128 0x1
 1389 0106 9C       		.byte	0x9c
 1390 0107 47010000 		.4byte	0x147
 1391 010b 09       		.uleb128 0x9
 1392 010c CE030000 		.4byte	.LASF21
 1393 0110 01       		.byte	0x1
 1394 0111 60       		.byte	0x60
 1395 0112 81000000 		.4byte	0x81
 1396 0116 02       		.uleb128 0x2
 1397 0117 91       		.byte	0x91
 1398 0118 6C       		.sleb128 -20
 1399 0119 09       		.uleb128 0x9
 1400 011a CD010000 		.4byte	.LASF22
 1401 011e 01       		.byte	0x1
 1402 011f 61       		.byte	0x61
 1403 0120 81000000 		.4byte	0x81
 1404 0124 02       		.uleb128 0x2
 1405 0125 91       		.byte	0x91
 1406 0126 64       		.sleb128 -28
 1407 0127 09       		.uleb128 0x9
 1408 0128 37000000 		.4byte	.LASF23
 1409 012c 01       		.byte	0x1
 1410 012d 62       		.byte	0x62
 1411 012e 97000000 		.4byte	0x97
 1412 0132 02       		.uleb128 0x2
 1413 0133 91       		.byte	0x91
 1414 0134 68       		.sleb128 -24
 1415 0135 09       		.uleb128 0x9
 1416 0136 B2000000 		.4byte	.LASF24
 1417 013a 01       		.byte	0x1
 1418 013b 65       		.byte	0x65
 1419 013c 57010000 		.4byte	0x157
 1420 0140 05       		.uleb128 0x5
 1421 0141 03       		.byte	0x3
 1422 0142 10000000 		.4byte	ADC_SAR_Seq_1_InputsPlacement.4747
 1423 0146 00       		.byte	0
 1424 0147 0A       		.uleb128 0xa
 1425 0148 6B000000 		.4byte	0x6b
 1426 014c 57010000 		.4byte	0x157
 1427 0150 0B       		.uleb128 0xb
 1428 0151 DE000000 		.4byte	0xde
 1429 0155 03       		.byte	0x3
 1430 0156 00       		.byte	0
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 41


 1431 0157 0C       		.uleb128 0xc
 1432 0158 47010000 		.4byte	0x147
 1433 015c 0D       		.uleb128 0xd
 1434 015d 9D000000 		.4byte	.LASF26
 1435 0161 01       		.byte	0x1
 1436 0162 2701     		.2byte	0x127
 1437 0164 00000000 		.4byte	.LFB4
 1438 0168 38000000 		.4byte	.LFE4-.LFB4
 1439 016c 01       		.uleb128 0x1
 1440 016d 9C       		.byte	0x9c
 1441 016e 0E       		.uleb128 0xe
 1442 016f 62030000 		.4byte	.LASF27
 1443 0173 01       		.byte	0x1
 1444 0174 4A01     		.2byte	0x14a
 1445 0176 00000000 		.4byte	.LFB5
 1446 017a 18000000 		.4byte	.LFE5-.LFB5
 1447 017e 01       		.uleb128 0x1
 1448 017f 9C       		.byte	0x9c
 1449 0180 0E       		.uleb128 0xe
 1450 0181 3E000000 		.4byte	.LASF28
 1451 0185 01       		.byte	0x1
 1452 0186 6401     		.2byte	0x164
 1453 0188 00000000 		.4byte	.LFB6
 1454 018c 1C000000 		.4byte	.LFE6-.LFB6
 1455 0190 01       		.uleb128 0x1
 1456 0191 9C       		.byte	0x9c
 1457 0192 0E       		.uleb128 0xe
 1458 0193 AA020000 		.4byte	.LASF29
 1459 0197 01       		.byte	0x1
 1460 0198 7D01     		.2byte	0x17d
 1461 019a 00000000 		.4byte	.LFB7
 1462 019e 1C000000 		.4byte	.LFE7-.LFB7
 1463 01a2 01       		.uleb128 0x1
 1464 01a3 9C       		.byte	0x9c
 1465 01a4 0F       		.uleb128 0xf
 1466 01a5 57020000 		.4byte	.LASF31
 1467 01a9 01       		.byte	0x1
 1468 01aa 9F01     		.2byte	0x19f
 1469 01ac 81000000 		.4byte	0x81
 1470 01b0 00000000 		.4byte	.LFB8
 1471 01b4 48000000 		.4byte	.LFE8-.LFB8
 1472 01b8 01       		.uleb128 0x1
 1473 01b9 9C       		.byte	0x9c
 1474 01ba DD010000 		.4byte	0x1dd
 1475 01be 10       		.uleb128 0x10
 1476 01bf 83010000 		.4byte	.LASF33
 1477 01c3 01       		.byte	0x1
 1478 01c4 9F01     		.2byte	0x19f
 1479 01c6 81000000 		.4byte	0x81
 1480 01ca 02       		.uleb128 0x2
 1481 01cb 91       		.byte	0x91
 1482 01cc 6C       		.sleb128 -20
 1483 01cd 11       		.uleb128 0x11
 1484 01ce 27040000 		.4byte	.LASF30
 1485 01d2 01       		.byte	0x1
 1486 01d3 A101     		.2byte	0x1a1
 1487 01d5 81000000 		.4byte	0x81
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 42


 1488 01d9 02       		.uleb128 0x2
 1489 01da 91       		.byte	0x91
 1490 01db 74       		.sleb128 -12
 1491 01dc 00       		.byte	0
 1492 01dd 12       		.uleb128 0x12
 1493 01de D0000000 		.4byte	.LASF32
 1494 01e2 01       		.byte	0x1
 1495 01e3 D501     		.2byte	0x1d5
 1496 01e5 8C000000 		.4byte	0x8c
 1497 01e9 00000000 		.4byte	.LFB9
 1498 01ed 44000000 		.4byte	.LFE9-.LFB9
 1499 01f1 01       		.uleb128 0x1
 1500 01f2 9C       		.byte	0x9c
 1501 01f3 16020000 		.4byte	0x216
 1502 01f7 10       		.uleb128 0x10
 1503 01f8 D4030000 		.4byte	.LASF34
 1504 01fc 01       		.byte	0x1
 1505 01fd D501     		.2byte	0x1d5
 1506 01ff 81000000 		.4byte	0x81
 1507 0203 02       		.uleb128 0x2
 1508 0204 91       		.byte	0x91
 1509 0205 6C       		.sleb128 -20
 1510 0206 11       		.uleb128 0x11
 1511 0207 67040000 		.4byte	.LASF35
 1512 020b 01       		.byte	0x1
 1513 020c D701     		.2byte	0x1d7
 1514 020e 81000000 		.4byte	0x81
 1515 0212 02       		.uleb128 0x2
 1516 0213 91       		.byte	0x91
 1517 0214 74       		.sleb128 -12
 1518 0215 00       		.byte	0
 1519 0216 13       		.uleb128 0x13
 1520 0217 B4030000 		.4byte	.LASF37
 1521 021b 01       		.byte	0x1
 1522 021c 0202     		.2byte	0x202
 1523 021e 00000000 		.4byte	.LFB10
 1524 0222 1C000000 		.4byte	.LFE10-.LFB10
 1525 0226 01       		.uleb128 0x1
 1526 0227 9C       		.byte	0x9c
 1527 0228 3C020000 		.4byte	0x23c
 1528 022c 10       		.uleb128 0x10
 1529 022d 60010000 		.4byte	.LASF38
 1530 0231 01       		.byte	0x1
 1531 0232 0202     		.2byte	0x202
 1532 0234 81000000 		.4byte	0x81
 1533 0238 02       		.uleb128 0x2
 1534 0239 91       		.byte	0x91
 1535 023a 74       		.sleb128 -12
 1536 023b 00       		.byte	0
 1537 023c 13       		.uleb128 0x13
 1538 023d DE030000 		.4byte	.LASF39
 1539 0241 01       		.byte	0x1
 1540 0242 2E02     		.2byte	0x22e
 1541 0244 00000000 		.4byte	.LFB11
 1542 0248 30000000 		.4byte	.LFE11-.LFB11
 1543 024c 01       		.uleb128 0x1
 1544 024d 9C       		.byte	0x9c
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 43


 1545 024e 62020000 		.4byte	0x262
 1546 0252 10       		.uleb128 0x10
 1547 0253 4E020000 		.4byte	.LASF40
 1548 0257 01       		.byte	0x1
 1549 0258 2E02     		.2byte	0x22e
 1550 025a 81000000 		.4byte	0x81
 1551 025e 02       		.uleb128 0x2
 1552 025f 91       		.byte	0x91
 1553 0260 74       		.sleb128 -12
 1554 0261 00       		.byte	0
 1555 0262 13       		.uleb128 0x13
 1556 0263 04010000 		.4byte	.LASF41
 1557 0267 01       		.byte	0x1
 1558 0268 4302     		.2byte	0x243
 1559 026a 00000000 		.4byte	.LFB12
 1560 026e 2C000000 		.4byte	.LFE12-.LFB12
 1561 0272 01       		.uleb128 0x1
 1562 0273 9C       		.byte	0x9c
 1563 0274 88020000 		.4byte	0x288
 1564 0278 10       		.uleb128 0x10
 1565 0279 75030000 		.4byte	.LASF42
 1566 027d 01       		.byte	0x1
 1567 027e 4302     		.2byte	0x243
 1568 0280 81000000 		.4byte	0x81
 1569 0284 02       		.uleb128 0x2
 1570 0285 91       		.byte	0x91
 1571 0286 74       		.sleb128 -12
 1572 0287 00       		.byte	0
 1573 0288 13       		.uleb128 0x13
 1574 0289 4C040000 		.4byte	.LASF43
 1575 028d 01       		.byte	0x1
 1576 028e 5B02     		.2byte	0x25b
 1577 0290 00000000 		.4byte	.LFB13
 1578 0294 1C000000 		.4byte	.LFE13-.LFB13
 1579 0298 01       		.uleb128 0x1
 1580 0299 9C       		.byte	0x9c
 1581 029a AE020000 		.4byte	0x2ae
 1582 029e 10       		.uleb128 0x10
 1583 029f 60010000 		.4byte	.LASF38
 1584 02a3 01       		.byte	0x1
 1585 02a4 5B02     		.2byte	0x25b
 1586 02a6 81000000 		.4byte	0x81
 1587 02aa 02       		.uleb128 0x2
 1588 02ab 91       		.byte	0x91
 1589 02ac 74       		.sleb128 -12
 1590 02ad 00       		.byte	0
 1591 02ae 13       		.uleb128 0x13
 1592 02af 59000000 		.4byte	.LASF44
 1593 02b3 01       		.byte	0x1
 1594 02b4 7202     		.2byte	0x272
 1595 02b6 00000000 		.4byte	.LFB14
 1596 02ba 1C000000 		.4byte	.LFE14-.LFB14
 1597 02be 01       		.uleb128 0x1
 1598 02bf 9C       		.byte	0x9c
 1599 02c0 D4020000 		.4byte	0x2d4
 1600 02c4 10       		.uleb128 0x10
 1601 02c5 60010000 		.4byte	.LASF38
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 44


 1602 02c9 01       		.byte	0x1
 1603 02ca 7202     		.2byte	0x272
 1604 02cc 81000000 		.4byte	0x81
 1605 02d0 02       		.uleb128 0x2
 1606 02d1 91       		.byte	0x91
 1607 02d2 74       		.sleb128 -12
 1608 02d3 00       		.byte	0
 1609 02d4 14       		.uleb128 0x14
 1610 02d5 2E040000 		.4byte	.LASF45
 1611 02d9 01       		.byte	0x1
 1612 02da 8E02     		.2byte	0x28e
 1613 02dc 00000000 		.4byte	.LFB15
 1614 02e0 30000000 		.4byte	.LFE15-.LFB15
 1615 02e4 01       		.uleb128 0x1
 1616 02e5 9C       		.byte	0x9c
 1617 02e6 09030000 		.4byte	0x309
 1618 02ea 10       		.uleb128 0x10
 1619 02eb D4030000 		.4byte	.LASF34
 1620 02ef 01       		.byte	0x1
 1621 02f0 8E02     		.2byte	0x28e
 1622 02f2 81000000 		.4byte	0x81
 1623 02f6 02       		.uleb128 0x2
 1624 02f7 91       		.byte	0x91
 1625 02f8 74       		.sleb128 -12
 1626 02f9 10       		.uleb128 0x10
 1627 02fa F8030000 		.4byte	.LASF46
 1628 02fe 01       		.byte	0x1
 1629 02ff 8E02     		.2byte	0x28e
 1630 0301 8C000000 		.4byte	0x8c
 1631 0305 02       		.uleb128 0x2
 1632 0306 91       		.byte	0x91
 1633 0307 72       		.sleb128 -14
 1634 0308 00       		.byte	0
 1635 0309 14       		.uleb128 0x14
 1636 030a 4C030000 		.4byte	.LASF47
 1637 030e 01       		.byte	0x1
 1638 030f B002     		.2byte	0x2b0
 1639 0311 00000000 		.4byte	.LFB16
 1640 0315 2C000000 		.4byte	.LFE16-.LFB16
 1641 0319 01       		.uleb128 0x1
 1642 031a 9C       		.byte	0x9c
 1643 031b 3E030000 		.4byte	0x33e
 1644 031f 10       		.uleb128 0x10
 1645 0320 D4030000 		.4byte	.LASF34
 1646 0324 01       		.byte	0x1
 1647 0325 B002     		.2byte	0x2b0
 1648 0327 81000000 		.4byte	0x81
 1649 032b 02       		.uleb128 0x2
 1650 032c 91       		.byte	0x91
 1651 032d 74       		.sleb128 -12
 1652 032e 10       		.uleb128 0x10
 1653 032f 2F000000 		.4byte	.LASF48
 1654 0333 01       		.byte	0x1
 1655 0334 B002     		.2byte	0x2b0
 1656 0336 97000000 		.4byte	0x97
 1657 033a 02       		.uleb128 0x2
 1658 033b 91       		.byte	0x91
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 45


 1659 033c 70       		.sleb128 -16
 1660 033d 00       		.byte	0
 1661 033e 12       		.uleb128 0x12
 1662 033f 65010000 		.4byte	.LASF49
 1663 0343 01       		.byte	0x1
 1664 0344 D102     		.2byte	0x2d1
 1665 0346 8C000000 		.4byte	0x8c
 1666 034a 00000000 		.4byte	.LFB17
 1667 034e A4000000 		.4byte	.LFE17-.LFB17
 1668 0352 01       		.uleb128 0x1
 1669 0353 9C       		.byte	0x9c
 1670 0354 86030000 		.4byte	0x386
 1671 0358 10       		.uleb128 0x10
 1672 0359 D4030000 		.4byte	.LASF34
 1673 035d 01       		.byte	0x1
 1674 035e D102     		.2byte	0x2d1
 1675 0360 81000000 		.4byte	0x81
 1676 0364 02       		.uleb128 0x2
 1677 0365 91       		.byte	0x91
 1678 0366 6C       		.sleb128 -20
 1679 0367 10       		.uleb128 0x10
 1680 0368 FF030000 		.4byte	.LASF50
 1681 036c 01       		.byte	0x1
 1682 036d D102     		.2byte	0x2d1
 1683 036f 8C000000 		.4byte	0x8c
 1684 0373 02       		.uleb128 0x2
 1685 0374 91       		.byte	0x91
 1686 0375 6A       		.sleb128 -22
 1687 0376 11       		.uleb128 0x11
 1688 0377 07020000 		.4byte	.LASF51
 1689 037b 01       		.byte	0x1
 1690 037c D302     		.2byte	0x2d3
 1691 037e 8C000000 		.4byte	0x8c
 1692 0382 02       		.uleb128 0x2
 1693 0383 91       		.byte	0x91
 1694 0384 76       		.sleb128 -10
 1695 0385 00       		.byte	0
 1696 0386 12       		.uleb128 0x12
 1697 0387 25010000 		.4byte	.LASF52
 1698 038b 01       		.byte	0x1
 1699 038c 0703     		.2byte	0x307
 1700 038e 97000000 		.4byte	0x97
 1701 0392 00000000 		.4byte	.LFB18
 1702 0396 98000000 		.4byte	.LFE18-.LFB18
 1703 039a 01       		.uleb128 0x1
 1704 039b 9C       		.byte	0x9c
 1705 039c CE030000 		.4byte	0x3ce
 1706 03a0 10       		.uleb128 0x10
 1707 03a1 D4030000 		.4byte	.LASF34
 1708 03a5 01       		.byte	0x1
 1709 03a6 0703     		.2byte	0x307
 1710 03a8 81000000 		.4byte	0x81
 1711 03ac 02       		.uleb128 0x2
 1712 03ad 91       		.byte	0x91
 1713 03ae 64       		.sleb128 -28
 1714 03af 10       		.uleb128 0x10
 1715 03b0 FF030000 		.4byte	.LASF50
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 46


 1716 03b4 01       		.byte	0x1
 1717 03b5 0703     		.2byte	0x307
 1718 03b7 8C000000 		.4byte	0x8c
 1719 03bb 02       		.uleb128 0x2
 1720 03bc 91       		.byte	0x91
 1721 03bd 62       		.sleb128 -30
 1722 03be 11       		.uleb128 0x11
 1723 03bf AE010000 		.4byte	.LASF53
 1724 03c3 01       		.byte	0x1
 1725 03c4 0903     		.2byte	0x309
 1726 03c6 BB000000 		.4byte	0xbb
 1727 03ca 02       		.uleb128 0x2
 1728 03cb 91       		.byte	0x91
 1729 03cc 68       		.sleb128 -24
 1730 03cd 00       		.byte	0
 1731 03ce 12       		.uleb128 0x12
 1732 03cf 97030000 		.4byte	.LASF54
 1733 03d3 01       		.byte	0x1
 1734 03d4 3403     		.2byte	0x334
 1735 03d6 A2000000 		.4byte	0xa2
 1736 03da 00000000 		.4byte	.LFB19
 1737 03de 80000000 		.4byte	.LFE19-.LFB19
 1738 03e2 01       		.uleb128 0x1
 1739 03e3 9C       		.byte	0x9c
 1740 03e4 16040000 		.4byte	0x416
 1741 03e8 10       		.uleb128 0x10
 1742 03e9 D4030000 		.4byte	.LASF34
 1743 03ed 01       		.byte	0x1
 1744 03ee 3403     		.2byte	0x334
 1745 03f0 81000000 		.4byte	0x81
 1746 03f4 02       		.uleb128 0x2
 1747 03f5 91       		.byte	0x91
 1748 03f6 64       		.sleb128 -28
 1749 03f7 10       		.uleb128 0x10
 1750 03f8 FF030000 		.4byte	.LASF50
 1751 03fc 01       		.byte	0x1
 1752 03fd 3403     		.2byte	0x334
 1753 03ff 8C000000 		.4byte	0x8c
 1754 0403 02       		.uleb128 0x2
 1755 0404 91       		.byte	0x91
 1756 0405 62       		.sleb128 -30
 1757 0406 11       		.uleb128 0x11
 1758 0407 C7010000 		.4byte	.LASF55
 1759 040b 01       		.byte	0x1
 1760 040c 3603     		.2byte	0x336
 1761 040e A2000000 		.4byte	0xa2
 1762 0412 02       		.uleb128 0x2
 1763 0413 91       		.byte	0x91
 1764 0414 6C       		.sleb128 -20
 1765 0415 00       		.byte	0
 1766 0416 0A       		.uleb128 0xa
 1767 0417 81000000 		.4byte	0x81
 1768 041b 26040000 		.4byte	0x426
 1769 041f 0B       		.uleb128 0xb
 1770 0420 DE000000 		.4byte	0xde
 1771 0424 03       		.byte	0x3
 1772 0425 00       		.byte	0
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 47


 1773 0426 09       		.uleb128 0x9
 1774 0427 EA010000 		.4byte	.LASF56
 1775 042b 01       		.byte	0x1
 1776 042c 21       		.byte	0x21
 1777 042d 37040000 		.4byte	0x437
 1778 0431 05       		.uleb128 0x5
 1779 0432 03       		.byte	0x3
 1780 0433 00000000 		.4byte	ADC_SAR_Seq_1_channelsConfig
 1781 0437 0C       		.uleb128 0xc
 1782 0438 16040000 		.4byte	0x416
 1783 043c 15       		.uleb128 0x15
 1784 043d 8B010000 		.4byte	.LASF57
 1785 0441 01       		.byte	0x1
 1786 0442 18       		.byte	0x18
 1787 0443 6B000000 		.4byte	0x6b
 1788 0447 05       		.uleb128 0x5
 1789 0448 03       		.byte	0x3
 1790 0449 00000000 		.4byte	ADC_SAR_Seq_1_initVar
 1791 044d 0A       		.uleb128 0xa
 1792 044e 8C000000 		.4byte	0x8c
 1793 0452 5D040000 		.4byte	0x45d
 1794 0456 0B       		.uleb128 0xb
 1795 0457 DE000000 		.4byte	0xde
 1796 045b 03       		.byte	0x3
 1797 045c 00       		.byte	0
 1798 045d 15       		.uleb128 0x15
 1799 045e 00000000 		.4byte	.LASF58
 1800 0462 01       		.byte	0x1
 1801 0463 19       		.byte	0x19
 1802 0464 6E040000 		.4byte	0x46e
 1803 0468 05       		.uleb128 0x5
 1804 0469 03       		.byte	0x3
 1805 046a 00000000 		.4byte	ADC_SAR_Seq_1_offset
 1806 046e 06       		.uleb128 0x6
 1807 046f 4D040000 		.4byte	0x44d
 1808 0473 0A       		.uleb128 0xa
 1809 0474 97000000 		.4byte	0x97
 1810 0478 83040000 		.4byte	0x483
 1811 047c 0B       		.uleb128 0xb
 1812 047d DE000000 		.4byte	0xde
 1813 0481 03       		.byte	0x3
 1814 0482 00       		.byte	0
 1815 0483 15       		.uleb128 0x15
 1816 0484 09040000 		.4byte	.LASF59
 1817 0488 01       		.byte	0x1
 1818 0489 1A       		.byte	0x1a
 1819 048a 94040000 		.4byte	0x494
 1820 048e 05       		.uleb128 0x5
 1821 048f 03       		.byte	0x3
 1822 0490 00000000 		.4byte	ADC_SAR_Seq_1_countsPer10Volt
 1823 0494 06       		.uleb128 0x6
 1824 0495 73040000 		.4byte	0x473
 1825 0499 00       		.byte	0
 1826              		.section	.debug_abbrev,"",%progbits
 1827              	.Ldebug_abbrev0:
 1828 0000 01       		.uleb128 0x1
 1829 0001 11       		.uleb128 0x11
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 48


 1830 0002 01       		.byte	0x1
 1831 0003 25       		.uleb128 0x25
 1832 0004 0E       		.uleb128 0xe
 1833 0005 13       		.uleb128 0x13
 1834 0006 0B       		.uleb128 0xb
 1835 0007 03       		.uleb128 0x3
 1836 0008 0E       		.uleb128 0xe
 1837 0009 1B       		.uleb128 0x1b
 1838 000a 0E       		.uleb128 0xe
 1839 000b 55       		.uleb128 0x55
 1840 000c 17       		.uleb128 0x17
 1841 000d 11       		.uleb128 0x11
 1842 000e 01       		.uleb128 0x1
 1843 000f 10       		.uleb128 0x10
 1844 0010 17       		.uleb128 0x17
 1845 0011 00       		.byte	0
 1846 0012 00       		.byte	0
 1847 0013 02       		.uleb128 0x2
 1848 0014 24       		.uleb128 0x24
 1849 0015 00       		.byte	0
 1850 0016 0B       		.uleb128 0xb
 1851 0017 0B       		.uleb128 0xb
 1852 0018 3E       		.uleb128 0x3e
 1853 0019 0B       		.uleb128 0xb
 1854 001a 03       		.uleb128 0x3
 1855 001b 0E       		.uleb128 0xe
 1856 001c 00       		.byte	0
 1857 001d 00       		.byte	0
 1858 001e 03       		.uleb128 0x3
 1859 001f 24       		.uleb128 0x24
 1860 0020 00       		.byte	0
 1861 0021 0B       		.uleb128 0xb
 1862 0022 0B       		.uleb128 0xb
 1863 0023 3E       		.uleb128 0x3e
 1864 0024 0B       		.uleb128 0xb
 1865 0025 03       		.uleb128 0x3
 1866 0026 08       		.uleb128 0x8
 1867 0027 00       		.byte	0
 1868 0028 00       		.byte	0
 1869 0029 04       		.uleb128 0x4
 1870 002a 16       		.uleb128 0x16
 1871 002b 00       		.byte	0
 1872 002c 03       		.uleb128 0x3
 1873 002d 0E       		.uleb128 0xe
 1874 002e 3A       		.uleb128 0x3a
 1875 002f 0B       		.uleb128 0xb
 1876 0030 3B       		.uleb128 0x3b
 1877 0031 0B       		.uleb128 0xb
 1878 0032 49       		.uleb128 0x49
 1879 0033 13       		.uleb128 0x13
 1880 0034 00       		.byte	0
 1881 0035 00       		.byte	0
 1882 0036 05       		.uleb128 0x5
 1883 0037 16       		.uleb128 0x16
 1884 0038 00       		.byte	0
 1885 0039 03       		.uleb128 0x3
 1886 003a 0E       		.uleb128 0xe
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 49


 1887 003b 3A       		.uleb128 0x3a
 1888 003c 0B       		.uleb128 0xb
 1889 003d 3B       		.uleb128 0x3b
 1890 003e 05       		.uleb128 0x5
 1891 003f 49       		.uleb128 0x49
 1892 0040 13       		.uleb128 0x13
 1893 0041 00       		.byte	0
 1894 0042 00       		.byte	0
 1895 0043 06       		.uleb128 0x6
 1896 0044 35       		.uleb128 0x35
 1897 0045 00       		.byte	0
 1898 0046 49       		.uleb128 0x49
 1899 0047 13       		.uleb128 0x13
 1900 0048 00       		.byte	0
 1901 0049 00       		.byte	0
 1902 004a 07       		.uleb128 0x7
 1903 004b 2E       		.uleb128 0x2e
 1904 004c 00       		.byte	0
 1905 004d 3F       		.uleb128 0x3f
 1906 004e 19       		.uleb128 0x19
 1907 004f 03       		.uleb128 0x3
 1908 0050 0E       		.uleb128 0xe
 1909 0051 3A       		.uleb128 0x3a
 1910 0052 0B       		.uleb128 0xb
 1911 0053 3B       		.uleb128 0x3b
 1912 0054 0B       		.uleb128 0xb
 1913 0055 27       		.uleb128 0x27
 1914 0056 19       		.uleb128 0x19
 1915 0057 11       		.uleb128 0x11
 1916 0058 01       		.uleb128 0x1
 1917 0059 12       		.uleb128 0x12
 1918 005a 06       		.uleb128 0x6
 1919 005b 40       		.uleb128 0x40
 1920 005c 18       		.uleb128 0x18
 1921 005d 9642     		.uleb128 0x2116
 1922 005f 19       		.uleb128 0x19
 1923 0060 00       		.byte	0
 1924 0061 00       		.byte	0
 1925 0062 08       		.uleb128 0x8
 1926 0063 2E       		.uleb128 0x2e
 1927 0064 01       		.byte	0x1
 1928 0065 3F       		.uleb128 0x3f
 1929 0066 19       		.uleb128 0x19
 1930 0067 03       		.uleb128 0x3
 1931 0068 0E       		.uleb128 0xe
 1932 0069 3A       		.uleb128 0x3a
 1933 006a 0B       		.uleb128 0xb
 1934 006b 3B       		.uleb128 0x3b
 1935 006c 0B       		.uleb128 0xb
 1936 006d 27       		.uleb128 0x27
 1937 006e 19       		.uleb128 0x19
 1938 006f 11       		.uleb128 0x11
 1939 0070 01       		.uleb128 0x1
 1940 0071 12       		.uleb128 0x12
 1941 0072 06       		.uleb128 0x6
 1942 0073 40       		.uleb128 0x40
 1943 0074 18       		.uleb128 0x18
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 50


 1944 0075 9642     		.uleb128 0x2116
 1945 0077 19       		.uleb128 0x19
 1946 0078 01       		.uleb128 0x1
 1947 0079 13       		.uleb128 0x13
 1948 007a 00       		.byte	0
 1949 007b 00       		.byte	0
 1950 007c 09       		.uleb128 0x9
 1951 007d 34       		.uleb128 0x34
 1952 007e 00       		.byte	0
 1953 007f 03       		.uleb128 0x3
 1954 0080 0E       		.uleb128 0xe
 1955 0081 3A       		.uleb128 0x3a
 1956 0082 0B       		.uleb128 0xb
 1957 0083 3B       		.uleb128 0x3b
 1958 0084 0B       		.uleb128 0xb
 1959 0085 49       		.uleb128 0x49
 1960 0086 13       		.uleb128 0x13
 1961 0087 02       		.uleb128 0x2
 1962 0088 18       		.uleb128 0x18
 1963 0089 00       		.byte	0
 1964 008a 00       		.byte	0
 1965 008b 0A       		.uleb128 0xa
 1966 008c 01       		.uleb128 0x1
 1967 008d 01       		.byte	0x1
 1968 008e 49       		.uleb128 0x49
 1969 008f 13       		.uleb128 0x13
 1970 0090 01       		.uleb128 0x1
 1971 0091 13       		.uleb128 0x13
 1972 0092 00       		.byte	0
 1973 0093 00       		.byte	0
 1974 0094 0B       		.uleb128 0xb
 1975 0095 21       		.uleb128 0x21
 1976 0096 00       		.byte	0
 1977 0097 49       		.uleb128 0x49
 1978 0098 13       		.uleb128 0x13
 1979 0099 2F       		.uleb128 0x2f
 1980 009a 0B       		.uleb128 0xb
 1981 009b 00       		.byte	0
 1982 009c 00       		.byte	0
 1983 009d 0C       		.uleb128 0xc
 1984 009e 26       		.uleb128 0x26
 1985 009f 00       		.byte	0
 1986 00a0 49       		.uleb128 0x49
 1987 00a1 13       		.uleb128 0x13
 1988 00a2 00       		.byte	0
 1989 00a3 00       		.byte	0
 1990 00a4 0D       		.uleb128 0xd
 1991 00a5 2E       		.uleb128 0x2e
 1992 00a6 00       		.byte	0
 1993 00a7 3F       		.uleb128 0x3f
 1994 00a8 19       		.uleb128 0x19
 1995 00a9 03       		.uleb128 0x3
 1996 00aa 0E       		.uleb128 0xe
 1997 00ab 3A       		.uleb128 0x3a
 1998 00ac 0B       		.uleb128 0xb
 1999 00ad 3B       		.uleb128 0x3b
 2000 00ae 05       		.uleb128 0x5
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 51


 2001 00af 27       		.uleb128 0x27
 2002 00b0 19       		.uleb128 0x19
 2003 00b1 11       		.uleb128 0x11
 2004 00b2 01       		.uleb128 0x1
 2005 00b3 12       		.uleb128 0x12
 2006 00b4 06       		.uleb128 0x6
 2007 00b5 40       		.uleb128 0x40
 2008 00b6 18       		.uleb128 0x18
 2009 00b7 9642     		.uleb128 0x2116
 2010 00b9 19       		.uleb128 0x19
 2011 00ba 00       		.byte	0
 2012 00bb 00       		.byte	0
 2013 00bc 0E       		.uleb128 0xe
 2014 00bd 2E       		.uleb128 0x2e
 2015 00be 00       		.byte	0
 2016 00bf 3F       		.uleb128 0x3f
 2017 00c0 19       		.uleb128 0x19
 2018 00c1 03       		.uleb128 0x3
 2019 00c2 0E       		.uleb128 0xe
 2020 00c3 3A       		.uleb128 0x3a
 2021 00c4 0B       		.uleb128 0xb
 2022 00c5 3B       		.uleb128 0x3b
 2023 00c6 05       		.uleb128 0x5
 2024 00c7 27       		.uleb128 0x27
 2025 00c8 19       		.uleb128 0x19
 2026 00c9 11       		.uleb128 0x11
 2027 00ca 01       		.uleb128 0x1
 2028 00cb 12       		.uleb128 0x12
 2029 00cc 06       		.uleb128 0x6
 2030 00cd 40       		.uleb128 0x40
 2031 00ce 18       		.uleb128 0x18
 2032 00cf 9742     		.uleb128 0x2117
 2033 00d1 19       		.uleb128 0x19
 2034 00d2 00       		.byte	0
 2035 00d3 00       		.byte	0
 2036 00d4 0F       		.uleb128 0xf
 2037 00d5 2E       		.uleb128 0x2e
 2038 00d6 01       		.byte	0x1
 2039 00d7 3F       		.uleb128 0x3f
 2040 00d8 19       		.uleb128 0x19
 2041 00d9 03       		.uleb128 0x3
 2042 00da 0E       		.uleb128 0xe
 2043 00db 3A       		.uleb128 0x3a
 2044 00dc 0B       		.uleb128 0xb
 2045 00dd 3B       		.uleb128 0x3b
 2046 00de 05       		.uleb128 0x5
 2047 00df 27       		.uleb128 0x27
 2048 00e0 19       		.uleb128 0x19
 2049 00e1 49       		.uleb128 0x49
 2050 00e2 13       		.uleb128 0x13
 2051 00e3 11       		.uleb128 0x11
 2052 00e4 01       		.uleb128 0x1
 2053 00e5 12       		.uleb128 0x12
 2054 00e6 06       		.uleb128 0x6
 2055 00e7 40       		.uleb128 0x40
 2056 00e8 18       		.uleb128 0x18
 2057 00e9 9742     		.uleb128 0x2117
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 52


 2058 00eb 19       		.uleb128 0x19
 2059 00ec 01       		.uleb128 0x1
 2060 00ed 13       		.uleb128 0x13
 2061 00ee 00       		.byte	0
 2062 00ef 00       		.byte	0
 2063 00f0 10       		.uleb128 0x10
 2064 00f1 05       		.uleb128 0x5
 2065 00f2 00       		.byte	0
 2066 00f3 03       		.uleb128 0x3
 2067 00f4 0E       		.uleb128 0xe
 2068 00f5 3A       		.uleb128 0x3a
 2069 00f6 0B       		.uleb128 0xb
 2070 00f7 3B       		.uleb128 0x3b
 2071 00f8 05       		.uleb128 0x5
 2072 00f9 49       		.uleb128 0x49
 2073 00fa 13       		.uleb128 0x13
 2074 00fb 02       		.uleb128 0x2
 2075 00fc 18       		.uleb128 0x18
 2076 00fd 00       		.byte	0
 2077 00fe 00       		.byte	0
 2078 00ff 11       		.uleb128 0x11
 2079 0100 34       		.uleb128 0x34
 2080 0101 00       		.byte	0
 2081 0102 03       		.uleb128 0x3
 2082 0103 0E       		.uleb128 0xe
 2083 0104 3A       		.uleb128 0x3a
 2084 0105 0B       		.uleb128 0xb
 2085 0106 3B       		.uleb128 0x3b
 2086 0107 05       		.uleb128 0x5
 2087 0108 49       		.uleb128 0x49
 2088 0109 13       		.uleb128 0x13
 2089 010a 02       		.uleb128 0x2
 2090 010b 18       		.uleb128 0x18
 2091 010c 00       		.byte	0
 2092 010d 00       		.byte	0
 2093 010e 12       		.uleb128 0x12
 2094 010f 2E       		.uleb128 0x2e
 2095 0110 01       		.byte	0x1
 2096 0111 3F       		.uleb128 0x3f
 2097 0112 19       		.uleb128 0x19
 2098 0113 03       		.uleb128 0x3
 2099 0114 0E       		.uleb128 0xe
 2100 0115 3A       		.uleb128 0x3a
 2101 0116 0B       		.uleb128 0xb
 2102 0117 3B       		.uleb128 0x3b
 2103 0118 05       		.uleb128 0x5
 2104 0119 27       		.uleb128 0x27
 2105 011a 19       		.uleb128 0x19
 2106 011b 49       		.uleb128 0x49
 2107 011c 13       		.uleb128 0x13
 2108 011d 11       		.uleb128 0x11
 2109 011e 01       		.uleb128 0x1
 2110 011f 12       		.uleb128 0x12
 2111 0120 06       		.uleb128 0x6
 2112 0121 40       		.uleb128 0x40
 2113 0122 18       		.uleb128 0x18
 2114 0123 9642     		.uleb128 0x2116
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 53


 2115 0125 19       		.uleb128 0x19
 2116 0126 01       		.uleb128 0x1
 2117 0127 13       		.uleb128 0x13
 2118 0128 00       		.byte	0
 2119 0129 00       		.byte	0
 2120 012a 13       		.uleb128 0x13
 2121 012b 2E       		.uleb128 0x2e
 2122 012c 01       		.byte	0x1
 2123 012d 3F       		.uleb128 0x3f
 2124 012e 19       		.uleb128 0x19
 2125 012f 03       		.uleb128 0x3
 2126 0130 0E       		.uleb128 0xe
 2127 0131 3A       		.uleb128 0x3a
 2128 0132 0B       		.uleb128 0xb
 2129 0133 3B       		.uleb128 0x3b
 2130 0134 05       		.uleb128 0x5
 2131 0135 27       		.uleb128 0x27
 2132 0136 19       		.uleb128 0x19
 2133 0137 11       		.uleb128 0x11
 2134 0138 01       		.uleb128 0x1
 2135 0139 12       		.uleb128 0x12
 2136 013a 06       		.uleb128 0x6
 2137 013b 40       		.uleb128 0x40
 2138 013c 18       		.uleb128 0x18
 2139 013d 9742     		.uleb128 0x2117
 2140 013f 19       		.uleb128 0x19
 2141 0140 01       		.uleb128 0x1
 2142 0141 13       		.uleb128 0x13
 2143 0142 00       		.byte	0
 2144 0143 00       		.byte	0
 2145 0144 14       		.uleb128 0x14
 2146 0145 2E       		.uleb128 0x2e
 2147 0146 01       		.byte	0x1
 2148 0147 3F       		.uleb128 0x3f
 2149 0148 19       		.uleb128 0x19
 2150 0149 03       		.uleb128 0x3
 2151 014a 0E       		.uleb128 0xe
 2152 014b 3A       		.uleb128 0x3a
 2153 014c 0B       		.uleb128 0xb
 2154 014d 3B       		.uleb128 0x3b
 2155 014e 05       		.uleb128 0x5
 2156 014f 27       		.uleb128 0x27
 2157 0150 19       		.uleb128 0x19
 2158 0151 11       		.uleb128 0x11
 2159 0152 01       		.uleb128 0x1
 2160 0153 12       		.uleb128 0x12
 2161 0154 06       		.uleb128 0x6
 2162 0155 40       		.uleb128 0x40
 2163 0156 18       		.uleb128 0x18
 2164 0157 9642     		.uleb128 0x2116
 2165 0159 19       		.uleb128 0x19
 2166 015a 01       		.uleb128 0x1
 2167 015b 13       		.uleb128 0x13
 2168 015c 00       		.byte	0
 2169 015d 00       		.byte	0
 2170 015e 15       		.uleb128 0x15
 2171 015f 34       		.uleb128 0x34
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 54


 2172 0160 00       		.byte	0
 2173 0161 03       		.uleb128 0x3
 2174 0162 0E       		.uleb128 0xe
 2175 0163 3A       		.uleb128 0x3a
 2176 0164 0B       		.uleb128 0xb
 2177 0165 3B       		.uleb128 0x3b
 2178 0166 0B       		.uleb128 0xb
 2179 0167 49       		.uleb128 0x49
 2180 0168 13       		.uleb128 0x13
 2181 0169 3F       		.uleb128 0x3f
 2182 016a 19       		.uleb128 0x19
 2183 016b 02       		.uleb128 0x2
 2184 016c 18       		.uleb128 0x18
 2185 016d 00       		.byte	0
 2186 016e 00       		.byte	0
 2187 016f 00       		.byte	0
 2188              		.section	.debug_aranges,"",%progbits
 2189 0000 A4000000 		.4byte	0xa4
 2190 0004 0200     		.2byte	0x2
 2191 0006 00000000 		.4byte	.Ldebug_info0
 2192 000a 04       		.byte	0x4
 2193 000b 00       		.byte	0
 2194 000c 0000     		.2byte	0
 2195 000e 0000     		.2byte	0
 2196 0010 00000000 		.4byte	.LFB2
 2197 0014 24000000 		.4byte	.LFE2-.LFB2
 2198 0018 00000000 		.4byte	.LFB3
 2199 001c F0010000 		.4byte	.LFE3-.LFB3
 2200 0020 00000000 		.4byte	.LFB4
 2201 0024 38000000 		.4byte	.LFE4-.LFB4
 2202 0028 00000000 		.4byte	.LFB5
 2203 002c 18000000 		.4byte	.LFE5-.LFB5
 2204 0030 00000000 		.4byte	.LFB6
 2205 0034 1C000000 		.4byte	.LFE6-.LFB6
 2206 0038 00000000 		.4byte	.LFB7
 2207 003c 1C000000 		.4byte	.LFE7-.LFB7
 2208 0040 00000000 		.4byte	.LFB8
 2209 0044 48000000 		.4byte	.LFE8-.LFB8
 2210 0048 00000000 		.4byte	.LFB9
 2211 004c 44000000 		.4byte	.LFE9-.LFB9
 2212 0050 00000000 		.4byte	.LFB10
 2213 0054 1C000000 		.4byte	.LFE10-.LFB10
 2214 0058 00000000 		.4byte	.LFB11
 2215 005c 30000000 		.4byte	.LFE11-.LFB11
 2216 0060 00000000 		.4byte	.LFB12
 2217 0064 2C000000 		.4byte	.LFE12-.LFB12
 2218 0068 00000000 		.4byte	.LFB13
 2219 006c 1C000000 		.4byte	.LFE13-.LFB13
 2220 0070 00000000 		.4byte	.LFB14
 2221 0074 1C000000 		.4byte	.LFE14-.LFB14
 2222 0078 00000000 		.4byte	.LFB15
 2223 007c 30000000 		.4byte	.LFE15-.LFB15
 2224 0080 00000000 		.4byte	.LFB16
 2225 0084 2C000000 		.4byte	.LFE16-.LFB16
 2226 0088 00000000 		.4byte	.LFB17
 2227 008c A4000000 		.4byte	.LFE17-.LFB17
 2228 0090 00000000 		.4byte	.LFB18
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 55


 2229 0094 98000000 		.4byte	.LFE18-.LFB18
 2230 0098 00000000 		.4byte	.LFB19
 2231 009c 80000000 		.4byte	.LFE19-.LFB19
 2232 00a0 00000000 		.4byte	0
 2233 00a4 00000000 		.4byte	0
 2234              		.section	.debug_ranges,"",%progbits
 2235              	.Ldebug_ranges0:
 2236 0000 00000000 		.4byte	.LFB2
 2237 0004 24000000 		.4byte	.LFE2
 2238 0008 00000000 		.4byte	.LFB3
 2239 000c F0010000 		.4byte	.LFE3
 2240 0010 00000000 		.4byte	.LFB4
 2241 0014 38000000 		.4byte	.LFE4
 2242 0018 00000000 		.4byte	.LFB5
 2243 001c 18000000 		.4byte	.LFE5
 2244 0020 00000000 		.4byte	.LFB6
 2245 0024 1C000000 		.4byte	.LFE6
 2246 0028 00000000 		.4byte	.LFB7
 2247 002c 1C000000 		.4byte	.LFE7
 2248 0030 00000000 		.4byte	.LFB8
 2249 0034 48000000 		.4byte	.LFE8
 2250 0038 00000000 		.4byte	.LFB9
 2251 003c 44000000 		.4byte	.LFE9
 2252 0040 00000000 		.4byte	.LFB10
 2253 0044 1C000000 		.4byte	.LFE10
 2254 0048 00000000 		.4byte	.LFB11
 2255 004c 30000000 		.4byte	.LFE11
 2256 0050 00000000 		.4byte	.LFB12
 2257 0054 2C000000 		.4byte	.LFE12
 2258 0058 00000000 		.4byte	.LFB13
 2259 005c 1C000000 		.4byte	.LFE13
 2260 0060 00000000 		.4byte	.LFB14
 2261 0064 1C000000 		.4byte	.LFE14
 2262 0068 00000000 		.4byte	.LFB15
 2263 006c 30000000 		.4byte	.LFE15
 2264 0070 00000000 		.4byte	.LFB16
 2265 0074 2C000000 		.4byte	.LFE16
 2266 0078 00000000 		.4byte	.LFB17
 2267 007c A4000000 		.4byte	.LFE17
 2268 0080 00000000 		.4byte	.LFB18
 2269 0084 98000000 		.4byte	.LFE18
 2270 0088 00000000 		.4byte	.LFB19
 2271 008c 80000000 		.4byte	.LFE19
 2272 0090 00000000 		.4byte	0
 2273 0094 00000000 		.4byte	0
 2274              		.section	.debug_line,"",%progbits
 2275              	.Ldebug_line0:
 2276 0000 40020000 		.section	.debug_str,"MS",%progbits,1
 2276      02004C00 
 2276      00000201 
 2276      FB0E0D00 
 2276      01010101 
 2277              	.LASF58:
 2278 0000 4144435F 		.ascii	"ADC_SAR_Seq_1_offset\000"
 2278      5341525F 
 2278      5365715F 
 2278      315F6F66 
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 56


 2278      66736574 
 2279              	.LASF10:
 2280 0015 75696E74 		.ascii	"uint16\000"
 2280      313600
 2281              	.LASF36:
 2282 001c 4144435F 		.ascii	"ADC_SAR_Seq_1_Init\000"
 2282      5341525F 
 2282      5365715F 
 2282      315F496E 
 2282      697400
 2283              	.LASF48:
 2284 002f 61646347 		.ascii	"adcGain\000"
 2284      61696E00 
 2285              	.LASF23:
 2286 0037 636F756E 		.ascii	"counts\000"
 2286      747300
 2287              	.LASF28:
 2288 003e 4144435F 		.ascii	"ADC_SAR_Seq_1_StartConvert\000"
 2288      5341525F 
 2288      5365715F 
 2288      315F5374 
 2288      61727443 
 2289              	.LASF44:
 2290 0059 4144435F 		.ascii	"ADC_SAR_Seq_1_SetSatMask\000"
 2290      5341525F 
 2290      5365715F 
 2290      315F5365 
 2290      74536174 
 2291              	.LASF25:
 2292 0072 4144435F 		.ascii	"ADC_SAR_Seq_1_Start\000"
 2292      5341525F 
 2292      5365715F 
 2292      315F5374 
 2292      61727400 
 2293              	.LASF7:
 2294 0086 6C6F6E67 		.ascii	"long long unsigned int\000"
 2294      206C6F6E 
 2294      6720756E 
 2294      7369676E 
 2294      65642069 
 2295              	.LASF26:
 2296 009d 4144435F 		.ascii	"ADC_SAR_Seq_1_Enable\000"
 2296      5341525F 
 2296      5365715F 
 2296      315F456E 
 2296      61626C65 
 2297              	.LASF24:
 2298 00b2 4144435F 		.ascii	"ADC_SAR_Seq_1_InputsPlacement\000"
 2298      5341525F 
 2298      5365715F 
 2298      315F496E 
 2298      70757473 
 2299              	.LASF32:
 2300 00d0 4144435F 		.ascii	"ADC_SAR_Seq_1_GetResult16\000"
 2300      5341525F 
 2300      5365715F 
 2300      315F4765 
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 57


 2300      74526573 
 2301              	.LASF6:
 2302 00ea 6C6F6E67 		.ascii	"long long int\000"
 2302      206C6F6E 
 2302      6720696E 
 2302      7400
 2303              	.LASF0:
 2304 00f8 7369676E 		.ascii	"signed char\000"
 2304      65642063 
 2304      68617200 
 2305              	.LASF41:
 2306 0104 4144435F 		.ascii	"ADC_SAR_Seq_1_SetHighLimit\000"
 2306      5341525F 
 2306      5365715F 
 2306      315F5365 
 2306      74486967 
 2307              	.LASF13:
 2308 011f 696E7433 		.ascii	"int32\000"
 2308      3200
 2309              	.LASF52:
 2310 0125 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_uVolts\000"
 2310      5341525F 
 2310      5365715F 
 2310      315F436F 
 2310      756E7473 
 2311              	.LASF4:
 2312 0143 6C6F6E67 		.ascii	"long int\000"
 2312      20696E74 
 2312      00
 2313              	.LASF9:
 2314 014c 75696E74 		.ascii	"uint8\000"
 2314      3800
 2315              	.LASF16:
 2316 0152 646F7562 		.ascii	"double\000"
 2316      6C6500
 2317              	.LASF11:
 2318 0159 75696E74 		.ascii	"uint32\000"
 2318      333200
 2319              	.LASF38:
 2320 0160 6D61736B 		.ascii	"mask\000"
 2320      00
 2321              	.LASF49:
 2322 0165 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_mVolts\000"
 2322      5341525F 
 2322      5365715F 
 2322      315F436F 
 2322      756E7473 
 2323              	.LASF33:
 2324 0183 7265744D 		.ascii	"retMode\000"
 2324      6F646500 
 2325              	.LASF57:
 2326 018b 4144435F 		.ascii	"ADC_SAR_Seq_1_initVar\000"
 2326      5341525F 
 2326      5365715F 
 2326      315F696E 
 2326      69745661 
 2327              	.LASF8:
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 58


 2328 01a1 756E7369 		.ascii	"unsigned int\000"
 2328      676E6564 
 2328      20696E74 
 2328      00
 2329              	.LASF53:
 2330 01ae 75566F6C 		.ascii	"uVolts\000"
 2330      747300
 2331              	.LASF5:
 2332 01b5 6C6F6E67 		.ascii	"long unsigned int\000"
 2332      20756E73 
 2332      69676E65 
 2332      6420696E 
 2332      7400
 2333              	.LASF55:
 2334 01c7 766F6C74 		.ascii	"volts\000"
 2334      7300
 2335              	.LASF22:
 2336 01cd 746D7052 		.ascii	"tmpRegVal\000"
 2336      65675661 
 2336      6C00
 2337              	.LASF3:
 2338 01d7 73686F72 		.ascii	"short unsigned int\000"
 2338      7420756E 
 2338      7369676E 
 2338      65642069 
 2338      6E7400
 2339              	.LASF56:
 2340 01ea 4144435F 		.ascii	"ADC_SAR_Seq_1_channelsConfig\000"
 2340      5341525F 
 2340      5365715F 
 2340      315F6368 
 2340      616E6E65 
 2341              	.LASF51:
 2342 0207 6D566F6C 		.ascii	"mVolts\000"
 2342      747300
 2343              	.LASF19:
 2344 020e 72656733 		.ascii	"reg32\000"
 2344      3200
 2345              	.LASF61:
 2346 0214 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c\000"
 2346      6E657261 
 2346      7465645F 
 2346      536F7572 
 2346      63655C50 
 2347              	.LASF14:
 2348 023d 666C6F61 		.ascii	"float32\000"
 2348      74333200 
 2349              	.LASF20:
 2350 0245 73697A65 		.ascii	"sizetype\000"
 2350      74797065 
 2350      00
 2351              	.LASF40:
 2352 024e 6C6F774C 		.ascii	"lowLimit\000"
 2352      696D6974 
 2352      00
 2353              	.LASF31:
 2354 0257 4144435F 		.ascii	"ADC_SAR_Seq_1_IsEndConversion\000"
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 59


 2354      5341525F 
 2354      5365715F 
 2354      315F4973 
 2354      456E6443 
 2355              	.LASF62:
 2356 0275 453A5C44 		.ascii	"E:\\Documents\\UROPs\\Biomech UROP\\Code\\Batt\\Bat"
 2356      6F63756D 
 2356      656E7473 
 2356      5C55524F 
 2356      50735C42 
 2357 02a2 742E6379 		.ascii	"t.cydsn\000"
 2357      64736E00 
 2358              	.LASF29:
 2359 02aa 4144435F 		.ascii	"ADC_SAR_Seq_1_StopConvert\000"
 2359      5341525F 
 2359      5365715F 
 2359      315F5374 
 2359      6F70436F 
 2360              	.LASF17:
 2361 02c4 696E7436 		.ascii	"int64\000"
 2361      3400
 2362              	.LASF15:
 2363 02ca 666C6F61 		.ascii	"float\000"
 2363      7400
 2364              	.LASF60:
 2365 02d0 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2365      4320342E 
 2365      382E3420 
 2365      32303134 
 2365      30353236 
 2366 0303 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2366      20726576 
 2366      6973696F 
 2366      6E203231 
 2366      31333538 
 2367 0336 30202D66 		.ascii	"0 -ffunction-sections\000"
 2367      66756E63 
 2367      74696F6E 
 2367      2D736563 
 2367      74696F6E 
 2368              	.LASF47:
 2369 034c 4144435F 		.ascii	"ADC_SAR_Seq_1_SetGain\000"
 2369      5341525F 
 2369      5365715F 
 2369      315F5365 
 2369      74476169 
 2370              	.LASF27:
 2371 0362 4144435F 		.ascii	"ADC_SAR_Seq_1_Stop\000"
 2371      5341525F 
 2371      5365715F 
 2371      315F5374 
 2371      6F7000
 2372              	.LASF42:
 2373 0375 68696768 		.ascii	"highLimit\000"
 2373      4C696D69 
 2373      7400
 2374              	.LASF1:
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 60


 2375 037f 756E7369 		.ascii	"unsigned char\000"
 2375      676E6564 
 2375      20636861 
 2375      7200
 2376              	.LASF2:
 2377 038d 73686F72 		.ascii	"short int\000"
 2377      7420696E 
 2377      7400
 2378              	.LASF54:
 2379 0397 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_Volts\000"
 2379      5341525F 
 2379      5365715F 
 2379      315F436F 
 2379      756E7473 
 2380              	.LASF37:
 2381 03b4 4144435F 		.ascii	"ADC_SAR_Seq_1_SetChanMask\000"
 2381      5341525F 
 2381      5365715F 
 2381      315F5365 
 2381      74436861 
 2382              	.LASF21:
 2383 03ce 63684E75 		.ascii	"chNum\000"
 2383      6D00
 2384              	.LASF34:
 2385 03d4 6368616E 		.ascii	"chan\000"
 2385      00
 2386              	.LASF18:
 2387 03d9 63686172 		.ascii	"char\000"
 2387      00
 2388              	.LASF39:
 2389 03de 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLowLimit\000"
 2389      5341525F 
 2389      5365715F 
 2389      315F5365 
 2389      744C6F77 
 2390              	.LASF46:
 2391 03f8 6F666673 		.ascii	"offset\000"
 2391      657400
 2392              	.LASF50:
 2393 03ff 61646343 		.ascii	"adcCounts\000"
 2393      6F756E74 
 2393      7300
 2394              	.LASF59:
 2395 0409 4144435F 		.ascii	"ADC_SAR_Seq_1_countsPer10Volt\000"
 2395      5341525F 
 2395      5365715F 
 2395      315F636F 
 2395      756E7473 
 2396              	.LASF30:
 2397 0427 73746174 		.ascii	"status\000"
 2397      757300
 2398              	.LASF45:
 2399 042e 4144435F 		.ascii	"ADC_SAR_Seq_1_SetOffset\000"
 2399      5341525F 
 2399      5365715F 
 2399      315F5365 
 2399      744F6666 
ARM GAS  C:\Users\Steven\AppData\Local\Temp\ccxxsNSV.s 			page 61


 2400              	.LASF12:
 2401 0446 696E7431 		.ascii	"int16\000"
 2401      3600
 2402              	.LASF43:
 2403 044c 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLimitMask\000"
 2403      5341525F 
 2403      5365715F 
 2403      315F5365 
 2403      744C696D 
 2404              	.LASF35:
 2405 0467 72657375 		.ascii	"result\000"
 2405      6C7400
 2406              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
